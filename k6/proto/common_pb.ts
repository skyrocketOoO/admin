// @generated by protoc-gen-es v1.10.0 with parameter "target=ts"
// @generated from file common.proto (package proto, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";

/**
 * @generated from message proto.Empty
 */
export class Empty extends Message<Empty> {
  constructor(data?: PartialMessage<Empty>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "proto.Empty";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Empty {
    return new Empty().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Empty {
    return new Empty().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Empty {
    return new Empty().fromJsonString(jsonString, options);
  }

  static equals(a: Empty | PlainMessage<Empty> | undefined, b: Empty | PlainMessage<Empty> | undefined): boolean {
    return proto3.util.equals(Empty, a, b);
  }
}

/**
 * @generated from message proto.ListOption
 */
export class ListOption extends Message<ListOption> {
  /**
   * @generated from field: optional proto.Pager Pager = 1;
   */
  Pager?: Pager;

  /**
   * @generated from field: optional proto.Sorter Sorter = 2;
   */
  Sorter?: Sorter;

  /**
   * @generated from field: repeated proto.Query Query = 3;
   */
  Query: Query[] = [];

  constructor(data?: PartialMessage<ListOption>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "proto.ListOption";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "Pager", kind: "message", T: Pager, opt: true },
    { no: 2, name: "Sorter", kind: "message", T: Sorter, opt: true },
    { no: 3, name: "Query", kind: "message", T: Query, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListOption {
    return new ListOption().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListOption {
    return new ListOption().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListOption {
    return new ListOption().fromJsonString(jsonString, options);
  }

  static equals(a: ListOption | PlainMessage<ListOption> | undefined, b: ListOption | PlainMessage<ListOption> | undefined): boolean {
    return proto3.util.equals(ListOption, a, b);
  }
}

/**
 * @generated from message proto.Pager
 */
export class Pager extends Message<Pager> {
  /**
   * @generated from field: int32 Number = 1;
   */
  Number = 0;

  /**
   * @generated from field: int32 Size = 2;
   */
  Size = 0;

  constructor(data?: PartialMessage<Pager>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "proto.Pager";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "Number", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 2, name: "Size", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Pager {
    return new Pager().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Pager {
    return new Pager().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Pager {
    return new Pager().fromJsonString(jsonString, options);
  }

  static equals(a: Pager | PlainMessage<Pager> | undefined, b: Pager | PlainMessage<Pager> | undefined): boolean {
    return proto3.util.equals(Pager, a, b);
  }
}

/**
 * @generated from message proto.Sorter
 */
export class Sorter extends Message<Sorter> {
  /**
   * @generated from field: bool Asc = 1;
   */
  Asc = false;

  /**
   * @generated from field: string Field = 2;
   */
  Field = "";

  constructor(data?: PartialMessage<Sorter>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "proto.Sorter";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "Asc", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 2, name: "Field", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Sorter {
    return new Sorter().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Sorter {
    return new Sorter().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Sorter {
    return new Sorter().fromJsonString(jsonString, options);
  }

  static equals(a: Sorter | PlainMessage<Sorter> | undefined, b: Sorter | PlainMessage<Sorter> | undefined): boolean {
    return proto3.util.equals(Sorter, a, b);
  }
}

/**
 * @generated from message proto.Query
 */
export class Query extends Message<Query> {
  /**
   * @generated from field: bool Fuzzy = 1;
   */
  Fuzzy = false;

  /**
   * @generated from field: repeated string Fields = 2;
   */
  Fields: string[] = [];

  /**
   * @generated from field: string Value = 3;
   */
  Value = "";

  constructor(data?: PartialMessage<Query>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "proto.Query";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "Fuzzy", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 2, name: "Fields", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
    { no: 3, name: "Value", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Query {
    return new Query().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Query {
    return new Query().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Query {
    return new Query().fromJsonString(jsonString, options);
  }

  static equals(a: Query | PlainMessage<Query> | undefined, b: Query | PlainMessage<Query> | undefined): boolean {
    return proto3.util.equals(Query, a, b);
  }
}

