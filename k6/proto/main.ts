// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v1.178.0
//   protoc               unknown
// source: main.proto

/* eslint-disable */
import {
  type CallOptions,
  ChannelCredentials,
  Client,
  type ClientOptions,
  type ClientUnaryCall,
  type handleUnaryCall,
  makeGenericClientConstructor,
  Metadata,
  type ServiceError,
  type UntypedServiceImplementation,
} from "@grpc/grpc-js";
import * as _m0 from "protobufjs/minimal";
import { Empty, ListOption } from "./common";
import { Role } from "./model/role";
import Long = require("long");

export const protobufPackage = "proto";

export interface CreateAccountReq {
  UserName: string;
  Password: string;
  DisplayName: string;
  RoleID?: number | undefined;
}

export interface ListAccountReq {
  Option?: ListOption | undefined;
}

export interface ListAccountResp {
  List: AccountData[];
  Total: number;
}

export interface AccountData {
  UserName: string;
  DisplayName: string;
  Email: string;
  State: number;
}

export interface UpdateAccountReq {
  ID: string;
  DisplayName: string;
  /** 0: no change, 1: active, 2: inactive */
  State: number;
}

export interface DeleteAccountReq {
  ID: string;
  Page: Page | undefined;
}

export interface CreateRoleReq {
  Name: string;
  Page: Page | undefined;
}

export interface Page {
  AccountList: PageOperation | undefined;
  Role: PageOperation | undefined;
  Setting: PageOperation | undefined;
}

export interface PageOperation {
  Create: boolean;
  Read: boolean;
  Update: boolean;
  Delete: boolean;
}

export interface ListRoleReq {
  Option?: ListOption | undefined;
}

export interface ListRoleResp {
  List: RoleData[];
  Total: number;
}

export interface RoleData {
  ID: string;
  Name: string;
}

export interface GetRoleAuthReq {
  /** if ID is "", return auth based on session */
  ID?: string | undefined;
}

export interface GetRoleAuthResp {
  Page: Page | undefined;
}

export interface UpdateRoleReq {
  ID: string;
  Name: string;
  Page: Page | undefined;
}

export interface DeleteRoleReq {
  ID: string;
}

export interface BindRoleReq {
  AccountID: string;
  RoleID: string;
}

export interface UnBindRoleReq {
  AccountID: string;
}

export interface LoginReq {
  UserName: string;
  Password: string;
}

export interface LoginResp {
  SessionID: string;
  Role: Role | undefined;
}

export interface LogoutReq {
  SessionID: string;
}

function createBaseCreateAccountReq(): CreateAccountReq {
  return { UserName: "", Password: "", DisplayName: "", RoleID: undefined };
}

export const CreateAccountReq = {
  encode(message: CreateAccountReq, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.UserName !== "") {
      writer.uint32(10).string(message.UserName);
    }
    if (message.Password !== "") {
      writer.uint32(18).string(message.Password);
    }
    if (message.DisplayName !== "") {
      writer.uint32(26).string(message.DisplayName);
    }
    if (message.RoleID !== undefined) {
      writer.uint32(32).uint32(message.RoleID);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): CreateAccountReq {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCreateAccountReq();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.UserName = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.Password = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.DisplayName = reader.string();
          continue;
        case 4:
          if (tag !== 32) {
            break;
          }

          message.RoleID = reader.uint32();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CreateAccountReq {
    return {
      UserName: isSet(object.UserName) ? globalThis.String(object.UserName) : "",
      Password: isSet(object.Password) ? globalThis.String(object.Password) : "",
      DisplayName: isSet(object.DisplayName) ? globalThis.String(object.DisplayName) : "",
      RoleID: isSet(object.RoleID) ? globalThis.Number(object.RoleID) : undefined,
    };
  },

  toJSON(message: CreateAccountReq): unknown {
    const obj: any = {};
    if (message.UserName !== "") {
      obj.UserName = message.UserName;
    }
    if (message.Password !== "") {
      obj.Password = message.Password;
    }
    if (message.DisplayName !== "") {
      obj.DisplayName = message.DisplayName;
    }
    if (message.RoleID !== undefined) {
      obj.RoleID = Math.round(message.RoleID);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<CreateAccountReq>, I>>(base?: I): CreateAccountReq {
    return CreateAccountReq.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<CreateAccountReq>, I>>(object: I): CreateAccountReq {
    const message = createBaseCreateAccountReq();
    message.UserName = object.UserName ?? "";
    message.Password = object.Password ?? "";
    message.DisplayName = object.DisplayName ?? "";
    message.RoleID = object.RoleID ?? undefined;
    return message;
  },
};

function createBaseListAccountReq(): ListAccountReq {
  return { Option: undefined };
}

export const ListAccountReq = {
  encode(message: ListAccountReq, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.Option !== undefined) {
      ListOption.encode(message.Option, writer.uint32(10).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): ListAccountReq {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListAccountReq();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.Option = ListOption.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListAccountReq {
    return { Option: isSet(object.Option) ? ListOption.fromJSON(object.Option) : undefined };
  },

  toJSON(message: ListAccountReq): unknown {
    const obj: any = {};
    if (message.Option !== undefined) {
      obj.Option = ListOption.toJSON(message.Option);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ListAccountReq>, I>>(base?: I): ListAccountReq {
    return ListAccountReq.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ListAccountReq>, I>>(object: I): ListAccountReq {
    const message = createBaseListAccountReq();
    message.Option = (object.Option !== undefined && object.Option !== null)
      ? ListOption.fromPartial(object.Option)
      : undefined;
    return message;
  },
};

function createBaseListAccountResp(): ListAccountResp {
  return { List: [], Total: 0 };
}

export const ListAccountResp = {
  encode(message: ListAccountResp, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    for (const v of message.List) {
      AccountData.encode(v!, writer.uint32(10).fork()).ldelim();
    }
    if (message.Total !== 0) {
      writer.uint32(16).int64(message.Total);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): ListAccountResp {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListAccountResp();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.List.push(AccountData.decode(reader, reader.uint32()));
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.Total = longToNumber(reader.int64() as Long);
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListAccountResp {
    return {
      List: globalThis.Array.isArray(object?.List) ? object.List.map((e: any) => AccountData.fromJSON(e)) : [],
      Total: isSet(object.Total) ? globalThis.Number(object.Total) : 0,
    };
  },

  toJSON(message: ListAccountResp): unknown {
    const obj: any = {};
    if (message.List?.length) {
      obj.List = message.List.map((e) => AccountData.toJSON(e));
    }
    if (message.Total !== 0) {
      obj.Total = Math.round(message.Total);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ListAccountResp>, I>>(base?: I): ListAccountResp {
    return ListAccountResp.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ListAccountResp>, I>>(object: I): ListAccountResp {
    const message = createBaseListAccountResp();
    message.List = object.List?.map((e) => AccountData.fromPartial(e)) || [];
    message.Total = object.Total ?? 0;
    return message;
  },
};

function createBaseAccountData(): AccountData {
  return { UserName: "", DisplayName: "", Email: "", State: 0 };
}

export const AccountData = {
  encode(message: AccountData, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.UserName !== "") {
      writer.uint32(10).string(message.UserName);
    }
    if (message.DisplayName !== "") {
      writer.uint32(18).string(message.DisplayName);
    }
    if (message.Email !== "") {
      writer.uint32(26).string(message.Email);
    }
    if (message.State !== 0) {
      writer.uint32(32).int32(message.State);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): AccountData {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseAccountData();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.UserName = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.DisplayName = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.Email = reader.string();
          continue;
        case 4:
          if (tag !== 32) {
            break;
          }

          message.State = reader.int32();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): AccountData {
    return {
      UserName: isSet(object.UserName) ? globalThis.String(object.UserName) : "",
      DisplayName: isSet(object.DisplayName) ? globalThis.String(object.DisplayName) : "",
      Email: isSet(object.Email) ? globalThis.String(object.Email) : "",
      State: isSet(object.State) ? globalThis.Number(object.State) : 0,
    };
  },

  toJSON(message: AccountData): unknown {
    const obj: any = {};
    if (message.UserName !== "") {
      obj.UserName = message.UserName;
    }
    if (message.DisplayName !== "") {
      obj.DisplayName = message.DisplayName;
    }
    if (message.Email !== "") {
      obj.Email = message.Email;
    }
    if (message.State !== 0) {
      obj.State = Math.round(message.State);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<AccountData>, I>>(base?: I): AccountData {
    return AccountData.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<AccountData>, I>>(object: I): AccountData {
    const message = createBaseAccountData();
    message.UserName = object.UserName ?? "";
    message.DisplayName = object.DisplayName ?? "";
    message.Email = object.Email ?? "";
    message.State = object.State ?? 0;
    return message;
  },
};

function createBaseUpdateAccountReq(): UpdateAccountReq {
  return { ID: "", DisplayName: "", State: 0 };
}

export const UpdateAccountReq = {
  encode(message: UpdateAccountReq, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.ID !== "") {
      writer.uint32(10).string(message.ID);
    }
    if (message.DisplayName !== "") {
      writer.uint32(18).string(message.DisplayName);
    }
    if (message.State !== 0) {
      writer.uint32(24).int32(message.State);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): UpdateAccountReq {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUpdateAccountReq();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.ID = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.DisplayName = reader.string();
          continue;
        case 3:
          if (tag !== 24) {
            break;
          }

          message.State = reader.int32();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UpdateAccountReq {
    return {
      ID: isSet(object.ID) ? globalThis.String(object.ID) : "",
      DisplayName: isSet(object.DisplayName) ? globalThis.String(object.DisplayName) : "",
      State: isSet(object.State) ? globalThis.Number(object.State) : 0,
    };
  },

  toJSON(message: UpdateAccountReq): unknown {
    const obj: any = {};
    if (message.ID !== "") {
      obj.ID = message.ID;
    }
    if (message.DisplayName !== "") {
      obj.DisplayName = message.DisplayName;
    }
    if (message.State !== 0) {
      obj.State = Math.round(message.State);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<UpdateAccountReq>, I>>(base?: I): UpdateAccountReq {
    return UpdateAccountReq.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<UpdateAccountReq>, I>>(object: I): UpdateAccountReq {
    const message = createBaseUpdateAccountReq();
    message.ID = object.ID ?? "";
    message.DisplayName = object.DisplayName ?? "";
    message.State = object.State ?? 0;
    return message;
  },
};

function createBaseDeleteAccountReq(): DeleteAccountReq {
  return { ID: "", Page: undefined };
}

export const DeleteAccountReq = {
  encode(message: DeleteAccountReq, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.ID !== "") {
      writer.uint32(10).string(message.ID);
    }
    if (message.Page !== undefined) {
      Page.encode(message.Page, writer.uint32(18).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): DeleteAccountReq {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDeleteAccountReq();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.ID = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.Page = Page.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): DeleteAccountReq {
    return {
      ID: isSet(object.ID) ? globalThis.String(object.ID) : "",
      Page: isSet(object.Page) ? Page.fromJSON(object.Page) : undefined,
    };
  },

  toJSON(message: DeleteAccountReq): unknown {
    const obj: any = {};
    if (message.ID !== "") {
      obj.ID = message.ID;
    }
    if (message.Page !== undefined) {
      obj.Page = Page.toJSON(message.Page);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<DeleteAccountReq>, I>>(base?: I): DeleteAccountReq {
    return DeleteAccountReq.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<DeleteAccountReq>, I>>(object: I): DeleteAccountReq {
    const message = createBaseDeleteAccountReq();
    message.ID = object.ID ?? "";
    message.Page = (object.Page !== undefined && object.Page !== null) ? Page.fromPartial(object.Page) : undefined;
    return message;
  },
};

function createBaseCreateRoleReq(): CreateRoleReq {
  return { Name: "", Page: undefined };
}

export const CreateRoleReq = {
  encode(message: CreateRoleReq, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.Name !== "") {
      writer.uint32(10).string(message.Name);
    }
    if (message.Page !== undefined) {
      Page.encode(message.Page, writer.uint32(18).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): CreateRoleReq {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCreateRoleReq();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.Name = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.Page = Page.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CreateRoleReq {
    return {
      Name: isSet(object.Name) ? globalThis.String(object.Name) : "",
      Page: isSet(object.Page) ? Page.fromJSON(object.Page) : undefined,
    };
  },

  toJSON(message: CreateRoleReq): unknown {
    const obj: any = {};
    if (message.Name !== "") {
      obj.Name = message.Name;
    }
    if (message.Page !== undefined) {
      obj.Page = Page.toJSON(message.Page);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<CreateRoleReq>, I>>(base?: I): CreateRoleReq {
    return CreateRoleReq.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<CreateRoleReq>, I>>(object: I): CreateRoleReq {
    const message = createBaseCreateRoleReq();
    message.Name = object.Name ?? "";
    message.Page = (object.Page !== undefined && object.Page !== null) ? Page.fromPartial(object.Page) : undefined;
    return message;
  },
};

function createBasePage(): Page {
  return { AccountList: undefined, Role: undefined, Setting: undefined };
}

export const Page = {
  encode(message: Page, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.AccountList !== undefined) {
      PageOperation.encode(message.AccountList, writer.uint32(10).fork()).ldelim();
    }
    if (message.Role !== undefined) {
      PageOperation.encode(message.Role, writer.uint32(18).fork()).ldelim();
    }
    if (message.Setting !== undefined) {
      PageOperation.encode(message.Setting, writer.uint32(26).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): Page {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBasePage();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.AccountList = PageOperation.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.Role = PageOperation.decode(reader, reader.uint32());
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.Setting = PageOperation.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Page {
    return {
      AccountList: isSet(object.AccountList) ? PageOperation.fromJSON(object.AccountList) : undefined,
      Role: isSet(object.Role) ? PageOperation.fromJSON(object.Role) : undefined,
      Setting: isSet(object.Setting) ? PageOperation.fromJSON(object.Setting) : undefined,
    };
  },

  toJSON(message: Page): unknown {
    const obj: any = {};
    if (message.AccountList !== undefined) {
      obj.AccountList = PageOperation.toJSON(message.AccountList);
    }
    if (message.Role !== undefined) {
      obj.Role = PageOperation.toJSON(message.Role);
    }
    if (message.Setting !== undefined) {
      obj.Setting = PageOperation.toJSON(message.Setting);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<Page>, I>>(base?: I): Page {
    return Page.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Page>, I>>(object: I): Page {
    const message = createBasePage();
    message.AccountList = (object.AccountList !== undefined && object.AccountList !== null)
      ? PageOperation.fromPartial(object.AccountList)
      : undefined;
    message.Role = (object.Role !== undefined && object.Role !== null)
      ? PageOperation.fromPartial(object.Role)
      : undefined;
    message.Setting = (object.Setting !== undefined && object.Setting !== null)
      ? PageOperation.fromPartial(object.Setting)
      : undefined;
    return message;
  },
};

function createBasePageOperation(): PageOperation {
  return { Create: false, Read: false, Update: false, Delete: false };
}

export const PageOperation = {
  encode(message: PageOperation, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.Create !== false) {
      writer.uint32(8).bool(message.Create);
    }
    if (message.Read !== false) {
      writer.uint32(16).bool(message.Read);
    }
    if (message.Update !== false) {
      writer.uint32(24).bool(message.Update);
    }
    if (message.Delete !== false) {
      writer.uint32(32).bool(message.Delete);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): PageOperation {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBasePageOperation();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.Create = reader.bool();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.Read = reader.bool();
          continue;
        case 3:
          if (tag !== 24) {
            break;
          }

          message.Update = reader.bool();
          continue;
        case 4:
          if (tag !== 32) {
            break;
          }

          message.Delete = reader.bool();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): PageOperation {
    return {
      Create: isSet(object.Create) ? globalThis.Boolean(object.Create) : false,
      Read: isSet(object.Read) ? globalThis.Boolean(object.Read) : false,
      Update: isSet(object.Update) ? globalThis.Boolean(object.Update) : false,
      Delete: isSet(object.Delete) ? globalThis.Boolean(object.Delete) : false,
    };
  },

  toJSON(message: PageOperation): unknown {
    const obj: any = {};
    if (message.Create !== false) {
      obj.Create = message.Create;
    }
    if (message.Read !== false) {
      obj.Read = message.Read;
    }
    if (message.Update !== false) {
      obj.Update = message.Update;
    }
    if (message.Delete !== false) {
      obj.Delete = message.Delete;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<PageOperation>, I>>(base?: I): PageOperation {
    return PageOperation.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<PageOperation>, I>>(object: I): PageOperation {
    const message = createBasePageOperation();
    message.Create = object.Create ?? false;
    message.Read = object.Read ?? false;
    message.Update = object.Update ?? false;
    message.Delete = object.Delete ?? false;
    return message;
  },
};

function createBaseListRoleReq(): ListRoleReq {
  return { Option: undefined };
}

export const ListRoleReq = {
  encode(message: ListRoleReq, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.Option !== undefined) {
      ListOption.encode(message.Option, writer.uint32(10).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): ListRoleReq {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListRoleReq();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.Option = ListOption.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListRoleReq {
    return { Option: isSet(object.Option) ? ListOption.fromJSON(object.Option) : undefined };
  },

  toJSON(message: ListRoleReq): unknown {
    const obj: any = {};
    if (message.Option !== undefined) {
      obj.Option = ListOption.toJSON(message.Option);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ListRoleReq>, I>>(base?: I): ListRoleReq {
    return ListRoleReq.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ListRoleReq>, I>>(object: I): ListRoleReq {
    const message = createBaseListRoleReq();
    message.Option = (object.Option !== undefined && object.Option !== null)
      ? ListOption.fromPartial(object.Option)
      : undefined;
    return message;
  },
};

function createBaseListRoleResp(): ListRoleResp {
  return { List: [], Total: 0 };
}

export const ListRoleResp = {
  encode(message: ListRoleResp, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    for (const v of message.List) {
      RoleData.encode(v!, writer.uint32(10).fork()).ldelim();
    }
    if (message.Total !== 0) {
      writer.uint32(16).int64(message.Total);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): ListRoleResp {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListRoleResp();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.List.push(RoleData.decode(reader, reader.uint32()));
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.Total = longToNumber(reader.int64() as Long);
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListRoleResp {
    return {
      List: globalThis.Array.isArray(object?.List) ? object.List.map((e: any) => RoleData.fromJSON(e)) : [],
      Total: isSet(object.Total) ? globalThis.Number(object.Total) : 0,
    };
  },

  toJSON(message: ListRoleResp): unknown {
    const obj: any = {};
    if (message.List?.length) {
      obj.List = message.List.map((e) => RoleData.toJSON(e));
    }
    if (message.Total !== 0) {
      obj.Total = Math.round(message.Total);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ListRoleResp>, I>>(base?: I): ListRoleResp {
    return ListRoleResp.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ListRoleResp>, I>>(object: I): ListRoleResp {
    const message = createBaseListRoleResp();
    message.List = object.List?.map((e) => RoleData.fromPartial(e)) || [];
    message.Total = object.Total ?? 0;
    return message;
  },
};

function createBaseRoleData(): RoleData {
  return { ID: "", Name: "" };
}

export const RoleData = {
  encode(message: RoleData, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.ID !== "") {
      writer.uint32(10).string(message.ID);
    }
    if (message.Name !== "") {
      writer.uint32(18).string(message.Name);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): RoleData {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRoleData();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.ID = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.Name = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): RoleData {
    return {
      ID: isSet(object.ID) ? globalThis.String(object.ID) : "",
      Name: isSet(object.Name) ? globalThis.String(object.Name) : "",
    };
  },

  toJSON(message: RoleData): unknown {
    const obj: any = {};
    if (message.ID !== "") {
      obj.ID = message.ID;
    }
    if (message.Name !== "") {
      obj.Name = message.Name;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<RoleData>, I>>(base?: I): RoleData {
    return RoleData.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<RoleData>, I>>(object: I): RoleData {
    const message = createBaseRoleData();
    message.ID = object.ID ?? "";
    message.Name = object.Name ?? "";
    return message;
  },
};

function createBaseGetRoleAuthReq(): GetRoleAuthReq {
  return { ID: undefined };
}

export const GetRoleAuthReq = {
  encode(message: GetRoleAuthReq, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.ID !== undefined) {
      writer.uint32(10).string(message.ID);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): GetRoleAuthReq {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetRoleAuthReq();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.ID = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetRoleAuthReq {
    return { ID: isSet(object.ID) ? globalThis.String(object.ID) : undefined };
  },

  toJSON(message: GetRoleAuthReq): unknown {
    const obj: any = {};
    if (message.ID !== undefined) {
      obj.ID = message.ID;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<GetRoleAuthReq>, I>>(base?: I): GetRoleAuthReq {
    return GetRoleAuthReq.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<GetRoleAuthReq>, I>>(object: I): GetRoleAuthReq {
    const message = createBaseGetRoleAuthReq();
    message.ID = object.ID ?? undefined;
    return message;
  },
};

function createBaseGetRoleAuthResp(): GetRoleAuthResp {
  return { Page: undefined };
}

export const GetRoleAuthResp = {
  encode(message: GetRoleAuthResp, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.Page !== undefined) {
      Page.encode(message.Page, writer.uint32(10).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): GetRoleAuthResp {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetRoleAuthResp();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.Page = Page.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetRoleAuthResp {
    return { Page: isSet(object.Page) ? Page.fromJSON(object.Page) : undefined };
  },

  toJSON(message: GetRoleAuthResp): unknown {
    const obj: any = {};
    if (message.Page !== undefined) {
      obj.Page = Page.toJSON(message.Page);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<GetRoleAuthResp>, I>>(base?: I): GetRoleAuthResp {
    return GetRoleAuthResp.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<GetRoleAuthResp>, I>>(object: I): GetRoleAuthResp {
    const message = createBaseGetRoleAuthResp();
    message.Page = (object.Page !== undefined && object.Page !== null) ? Page.fromPartial(object.Page) : undefined;
    return message;
  },
};

function createBaseUpdateRoleReq(): UpdateRoleReq {
  return { ID: "", Name: "", Page: undefined };
}

export const UpdateRoleReq = {
  encode(message: UpdateRoleReq, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.ID !== "") {
      writer.uint32(10).string(message.ID);
    }
    if (message.Name !== "") {
      writer.uint32(18).string(message.Name);
    }
    if (message.Page !== undefined) {
      Page.encode(message.Page, writer.uint32(26).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): UpdateRoleReq {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUpdateRoleReq();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.ID = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.Name = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.Page = Page.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UpdateRoleReq {
    return {
      ID: isSet(object.ID) ? globalThis.String(object.ID) : "",
      Name: isSet(object.Name) ? globalThis.String(object.Name) : "",
      Page: isSet(object.Page) ? Page.fromJSON(object.Page) : undefined,
    };
  },

  toJSON(message: UpdateRoleReq): unknown {
    const obj: any = {};
    if (message.ID !== "") {
      obj.ID = message.ID;
    }
    if (message.Name !== "") {
      obj.Name = message.Name;
    }
    if (message.Page !== undefined) {
      obj.Page = Page.toJSON(message.Page);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<UpdateRoleReq>, I>>(base?: I): UpdateRoleReq {
    return UpdateRoleReq.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<UpdateRoleReq>, I>>(object: I): UpdateRoleReq {
    const message = createBaseUpdateRoleReq();
    message.ID = object.ID ?? "";
    message.Name = object.Name ?? "";
    message.Page = (object.Page !== undefined && object.Page !== null) ? Page.fromPartial(object.Page) : undefined;
    return message;
  },
};

function createBaseDeleteRoleReq(): DeleteRoleReq {
  return { ID: "" };
}

export const DeleteRoleReq = {
  encode(message: DeleteRoleReq, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.ID !== "") {
      writer.uint32(10).string(message.ID);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): DeleteRoleReq {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDeleteRoleReq();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.ID = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): DeleteRoleReq {
    return { ID: isSet(object.ID) ? globalThis.String(object.ID) : "" };
  },

  toJSON(message: DeleteRoleReq): unknown {
    const obj: any = {};
    if (message.ID !== "") {
      obj.ID = message.ID;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<DeleteRoleReq>, I>>(base?: I): DeleteRoleReq {
    return DeleteRoleReq.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<DeleteRoleReq>, I>>(object: I): DeleteRoleReq {
    const message = createBaseDeleteRoleReq();
    message.ID = object.ID ?? "";
    return message;
  },
};

function createBaseBindRoleReq(): BindRoleReq {
  return { AccountID: "", RoleID: "" };
}

export const BindRoleReq = {
  encode(message: BindRoleReq, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.AccountID !== "") {
      writer.uint32(10).string(message.AccountID);
    }
    if (message.RoleID !== "") {
      writer.uint32(18).string(message.RoleID);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): BindRoleReq {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseBindRoleReq();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.AccountID = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.RoleID = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): BindRoleReq {
    return {
      AccountID: isSet(object.AccountID) ? globalThis.String(object.AccountID) : "",
      RoleID: isSet(object.RoleID) ? globalThis.String(object.RoleID) : "",
    };
  },

  toJSON(message: BindRoleReq): unknown {
    const obj: any = {};
    if (message.AccountID !== "") {
      obj.AccountID = message.AccountID;
    }
    if (message.RoleID !== "") {
      obj.RoleID = message.RoleID;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<BindRoleReq>, I>>(base?: I): BindRoleReq {
    return BindRoleReq.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<BindRoleReq>, I>>(object: I): BindRoleReq {
    const message = createBaseBindRoleReq();
    message.AccountID = object.AccountID ?? "";
    message.RoleID = object.RoleID ?? "";
    return message;
  },
};

function createBaseUnBindRoleReq(): UnBindRoleReq {
  return { AccountID: "" };
}

export const UnBindRoleReq = {
  encode(message: UnBindRoleReq, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.AccountID !== "") {
      writer.uint32(10).string(message.AccountID);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): UnBindRoleReq {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUnBindRoleReq();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.AccountID = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UnBindRoleReq {
    return { AccountID: isSet(object.AccountID) ? globalThis.String(object.AccountID) : "" };
  },

  toJSON(message: UnBindRoleReq): unknown {
    const obj: any = {};
    if (message.AccountID !== "") {
      obj.AccountID = message.AccountID;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<UnBindRoleReq>, I>>(base?: I): UnBindRoleReq {
    return UnBindRoleReq.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<UnBindRoleReq>, I>>(object: I): UnBindRoleReq {
    const message = createBaseUnBindRoleReq();
    message.AccountID = object.AccountID ?? "";
    return message;
  },
};

function createBaseLoginReq(): LoginReq {
  return { UserName: "", Password: "" };
}

export const LoginReq = {
  encode(message: LoginReq, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.UserName !== "") {
      writer.uint32(10).string(message.UserName);
    }
    if (message.Password !== "") {
      writer.uint32(18).string(message.Password);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): LoginReq {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseLoginReq();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.UserName = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.Password = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): LoginReq {
    return {
      UserName: isSet(object.UserName) ? globalThis.String(object.UserName) : "",
      Password: isSet(object.Password) ? globalThis.String(object.Password) : "",
    };
  },

  toJSON(message: LoginReq): unknown {
    const obj: any = {};
    if (message.UserName !== "") {
      obj.UserName = message.UserName;
    }
    if (message.Password !== "") {
      obj.Password = message.Password;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<LoginReq>, I>>(base?: I): LoginReq {
    return LoginReq.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<LoginReq>, I>>(object: I): LoginReq {
    const message = createBaseLoginReq();
    message.UserName = object.UserName ?? "";
    message.Password = object.Password ?? "";
    return message;
  },
};

function createBaseLoginResp(): LoginResp {
  return { SessionID: "", Role: undefined };
}

export const LoginResp = {
  encode(message: LoginResp, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.SessionID !== "") {
      writer.uint32(10).string(message.SessionID);
    }
    if (message.Role !== undefined) {
      Role.encode(message.Role, writer.uint32(18).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): LoginResp {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseLoginResp();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.SessionID = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.Role = Role.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): LoginResp {
    return {
      SessionID: isSet(object.SessionID) ? globalThis.String(object.SessionID) : "",
      Role: isSet(object.Role) ? Role.fromJSON(object.Role) : undefined,
    };
  },

  toJSON(message: LoginResp): unknown {
    const obj: any = {};
    if (message.SessionID !== "") {
      obj.SessionID = message.SessionID;
    }
    if (message.Role !== undefined) {
      obj.Role = Role.toJSON(message.Role);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<LoginResp>, I>>(base?: I): LoginResp {
    return LoginResp.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<LoginResp>, I>>(object: I): LoginResp {
    const message = createBaseLoginResp();
    message.SessionID = object.SessionID ?? "";
    message.Role = (object.Role !== undefined && object.Role !== null) ? Role.fromPartial(object.Role) : undefined;
    return message;
  },
};

function createBaseLogoutReq(): LogoutReq {
  return { SessionID: "" };
}

export const LogoutReq = {
  encode(message: LogoutReq, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.SessionID !== "") {
      writer.uint32(10).string(message.SessionID);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): LogoutReq {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseLogoutReq();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.SessionID = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): LogoutReq {
    return { SessionID: isSet(object.SessionID) ? globalThis.String(object.SessionID) : "" };
  },

  toJSON(message: LogoutReq): unknown {
    const obj: any = {};
    if (message.SessionID !== "") {
      obj.SessionID = message.SessionID;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<LogoutReq>, I>>(base?: I): LogoutReq {
    return LogoutReq.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<LogoutReq>, I>>(object: I): LogoutReq {
    const message = createBaseLogoutReq();
    message.SessionID = object.SessionID ?? "";
    return message;
  },
};

export type MainService = typeof MainService;
export const MainService = {
  login: {
    path: "/proto.Main/Login",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: LoginReq) => Buffer.from(LoginReq.encode(value).finish()),
    requestDeserialize: (value: Buffer) => LoginReq.decode(value),
    responseSerialize: (value: LoginResp) => Buffer.from(LoginResp.encode(value).finish()),
    responseDeserialize: (value: Buffer) => LoginResp.decode(value),
  },
  logout: {
    path: "/proto.Main/Logout",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: LogoutReq) => Buffer.from(LogoutReq.encode(value).finish()),
    requestDeserialize: (value: Buffer) => LogoutReq.decode(value),
    responseSerialize: (value: Empty) => Buffer.from(Empty.encode(value).finish()),
    responseDeserialize: (value: Buffer) => Empty.decode(value),
  },
  createAccount: {
    path: "/proto.Main/CreateAccount",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: CreateAccountReq) => Buffer.from(CreateAccountReq.encode(value).finish()),
    requestDeserialize: (value: Buffer) => CreateAccountReq.decode(value),
    responseSerialize: (value: Empty) => Buffer.from(Empty.encode(value).finish()),
    responseDeserialize: (value: Buffer) => Empty.decode(value),
  },
  listAccount: {
    path: "/proto.Main/ListAccount",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: ListAccountReq) => Buffer.from(ListAccountReq.encode(value).finish()),
    requestDeserialize: (value: Buffer) => ListAccountReq.decode(value),
    responseSerialize: (value: ListAccountResp) => Buffer.from(ListAccountResp.encode(value).finish()),
    responseDeserialize: (value: Buffer) => ListAccountResp.decode(value),
  },
  updateAccount: {
    path: "/proto.Main/UpdateAccount",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: UpdateAccountReq) => Buffer.from(UpdateAccountReq.encode(value).finish()),
    requestDeserialize: (value: Buffer) => UpdateAccountReq.decode(value),
    responseSerialize: (value: Empty) => Buffer.from(Empty.encode(value).finish()),
    responseDeserialize: (value: Buffer) => Empty.decode(value),
  },
  deleteAccount: {
    path: "/proto.Main/DeleteAccount",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: DeleteAccountReq) => Buffer.from(DeleteAccountReq.encode(value).finish()),
    requestDeserialize: (value: Buffer) => DeleteAccountReq.decode(value),
    responseSerialize: (value: Empty) => Buffer.from(Empty.encode(value).finish()),
    responseDeserialize: (value: Buffer) => Empty.decode(value),
  },
  deactiveAccount: {
    path: "/proto.Main/DeactiveAccount",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: DeleteAccountReq) => Buffer.from(DeleteAccountReq.encode(value).finish()),
    requestDeserialize: (value: Buffer) => DeleteAccountReq.decode(value),
    responseSerialize: (value: Empty) => Buffer.from(Empty.encode(value).finish()),
    responseDeserialize: (value: Buffer) => Empty.decode(value),
  },
  activeAccount: {
    path: "/proto.Main/ActiveAccount",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: DeleteAccountReq) => Buffer.from(DeleteAccountReq.encode(value).finish()),
    requestDeserialize: (value: Buffer) => DeleteAccountReq.decode(value),
    responseSerialize: (value: Empty) => Buffer.from(Empty.encode(value).finish()),
    responseDeserialize: (value: Buffer) => Empty.decode(value),
  },
  createRole: {
    path: "/proto.Main/CreateRole",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: CreateRoleReq) => Buffer.from(CreateRoleReq.encode(value).finish()),
    requestDeserialize: (value: Buffer) => CreateRoleReq.decode(value),
    responseSerialize: (value: Empty) => Buffer.from(Empty.encode(value).finish()),
    responseDeserialize: (value: Buffer) => Empty.decode(value),
  },
  listRole: {
    path: "/proto.Main/ListRole",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: ListRoleReq) => Buffer.from(ListRoleReq.encode(value).finish()),
    requestDeserialize: (value: Buffer) => ListRoleReq.decode(value),
    responseSerialize: (value: ListRoleResp) => Buffer.from(ListRoleResp.encode(value).finish()),
    responseDeserialize: (value: Buffer) => ListRoleResp.decode(value),
  },
  getRoleAuth: {
    path: "/proto.Main/GetRoleAuth",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: GetRoleAuthReq) => Buffer.from(GetRoleAuthReq.encode(value).finish()),
    requestDeserialize: (value: Buffer) => GetRoleAuthReq.decode(value),
    responseSerialize: (value: GetRoleAuthResp) => Buffer.from(GetRoleAuthResp.encode(value).finish()),
    responseDeserialize: (value: Buffer) => GetRoleAuthResp.decode(value),
  },
  updateRole: {
    path: "/proto.Main/UpdateRole",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: UpdateRoleReq) => Buffer.from(UpdateRoleReq.encode(value).finish()),
    requestDeserialize: (value: Buffer) => UpdateRoleReq.decode(value),
    responseSerialize: (value: Empty) => Buffer.from(Empty.encode(value).finish()),
    responseDeserialize: (value: Buffer) => Empty.decode(value),
  },
  deleteRole: {
    path: "/proto.Main/DeleteRole",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: DeleteRoleReq) => Buffer.from(DeleteRoleReq.encode(value).finish()),
    requestDeserialize: (value: Buffer) => DeleteRoleReq.decode(value),
    responseSerialize: (value: Empty) => Buffer.from(Empty.encode(value).finish()),
    responseDeserialize: (value: Buffer) => Empty.decode(value),
  },
  bindRole: {
    path: "/proto.Main/BindRole",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: BindRoleReq) => Buffer.from(BindRoleReq.encode(value).finish()),
    requestDeserialize: (value: Buffer) => BindRoleReq.decode(value),
    responseSerialize: (value: Empty) => Buffer.from(Empty.encode(value).finish()),
    responseDeserialize: (value: Buffer) => Empty.decode(value),
  },
  unBindRole: {
    path: "/proto.Main/UnBindRole",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: UnBindRoleReq) => Buffer.from(UnBindRoleReq.encode(value).finish()),
    requestDeserialize: (value: Buffer) => UnBindRoleReq.decode(value),
    responseSerialize: (value: Empty) => Buffer.from(Empty.encode(value).finish()),
    responseDeserialize: (value: Buffer) => Empty.decode(value),
  },
} as const;

export interface MainServer extends UntypedServiceImplementation {
  login: handleUnaryCall<LoginReq, LoginResp>;
  logout: handleUnaryCall<LogoutReq, Empty>;
  createAccount: handleUnaryCall<CreateAccountReq, Empty>;
  listAccount: handleUnaryCall<ListAccountReq, ListAccountResp>;
  updateAccount: handleUnaryCall<UpdateAccountReq, Empty>;
  deleteAccount: handleUnaryCall<DeleteAccountReq, Empty>;
  deactiveAccount: handleUnaryCall<DeleteAccountReq, Empty>;
  activeAccount: handleUnaryCall<DeleteAccountReq, Empty>;
  createRole: handleUnaryCall<CreateRoleReq, Empty>;
  listRole: handleUnaryCall<ListRoleReq, ListRoleResp>;
  getRoleAuth: handleUnaryCall<GetRoleAuthReq, GetRoleAuthResp>;
  updateRole: handleUnaryCall<UpdateRoleReq, Empty>;
  deleteRole: handleUnaryCall<DeleteRoleReq, Empty>;
  bindRole: handleUnaryCall<BindRoleReq, Empty>;
  unBindRole: handleUnaryCall<UnBindRoleReq, Empty>;
}

export interface MainClient extends Client {
  login(request: LoginReq, callback: (error: ServiceError | null, response: LoginResp) => void): ClientUnaryCall;
  login(
    request: LoginReq,
    metadata: Metadata,
    callback: (error: ServiceError | null, response: LoginResp) => void,
  ): ClientUnaryCall;
  login(
    request: LoginReq,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (error: ServiceError | null, response: LoginResp) => void,
  ): ClientUnaryCall;
  logout(request: LogoutReq, callback: (error: ServiceError | null, response: Empty) => void): ClientUnaryCall;
  logout(
    request: LogoutReq,
    metadata: Metadata,
    callback: (error: ServiceError | null, response: Empty) => void,
  ): ClientUnaryCall;
  logout(
    request: LogoutReq,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (error: ServiceError | null, response: Empty) => void,
  ): ClientUnaryCall;
  createAccount(
    request: CreateAccountReq,
    callback: (error: ServiceError | null, response: Empty) => void,
  ): ClientUnaryCall;
  createAccount(
    request: CreateAccountReq,
    metadata: Metadata,
    callback: (error: ServiceError | null, response: Empty) => void,
  ): ClientUnaryCall;
  createAccount(
    request: CreateAccountReq,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (error: ServiceError | null, response: Empty) => void,
  ): ClientUnaryCall;
  listAccount(
    request: ListAccountReq,
    callback: (error: ServiceError | null, response: ListAccountResp) => void,
  ): ClientUnaryCall;
  listAccount(
    request: ListAccountReq,
    metadata: Metadata,
    callback: (error: ServiceError | null, response: ListAccountResp) => void,
  ): ClientUnaryCall;
  listAccount(
    request: ListAccountReq,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (error: ServiceError | null, response: ListAccountResp) => void,
  ): ClientUnaryCall;
  updateAccount(
    request: UpdateAccountReq,
    callback: (error: ServiceError | null, response: Empty) => void,
  ): ClientUnaryCall;
  updateAccount(
    request: UpdateAccountReq,
    metadata: Metadata,
    callback: (error: ServiceError | null, response: Empty) => void,
  ): ClientUnaryCall;
  updateAccount(
    request: UpdateAccountReq,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (error: ServiceError | null, response: Empty) => void,
  ): ClientUnaryCall;
  deleteAccount(
    request: DeleteAccountReq,
    callback: (error: ServiceError | null, response: Empty) => void,
  ): ClientUnaryCall;
  deleteAccount(
    request: DeleteAccountReq,
    metadata: Metadata,
    callback: (error: ServiceError | null, response: Empty) => void,
  ): ClientUnaryCall;
  deleteAccount(
    request: DeleteAccountReq,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (error: ServiceError | null, response: Empty) => void,
  ): ClientUnaryCall;
  deactiveAccount(
    request: DeleteAccountReq,
    callback: (error: ServiceError | null, response: Empty) => void,
  ): ClientUnaryCall;
  deactiveAccount(
    request: DeleteAccountReq,
    metadata: Metadata,
    callback: (error: ServiceError | null, response: Empty) => void,
  ): ClientUnaryCall;
  deactiveAccount(
    request: DeleteAccountReq,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (error: ServiceError | null, response: Empty) => void,
  ): ClientUnaryCall;
  activeAccount(
    request: DeleteAccountReq,
    callback: (error: ServiceError | null, response: Empty) => void,
  ): ClientUnaryCall;
  activeAccount(
    request: DeleteAccountReq,
    metadata: Metadata,
    callback: (error: ServiceError | null, response: Empty) => void,
  ): ClientUnaryCall;
  activeAccount(
    request: DeleteAccountReq,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (error: ServiceError | null, response: Empty) => void,
  ): ClientUnaryCall;
  createRole(request: CreateRoleReq, callback: (error: ServiceError | null, response: Empty) => void): ClientUnaryCall;
  createRole(
    request: CreateRoleReq,
    metadata: Metadata,
    callback: (error: ServiceError | null, response: Empty) => void,
  ): ClientUnaryCall;
  createRole(
    request: CreateRoleReq,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (error: ServiceError | null, response: Empty) => void,
  ): ClientUnaryCall;
  listRole(
    request: ListRoleReq,
    callback: (error: ServiceError | null, response: ListRoleResp) => void,
  ): ClientUnaryCall;
  listRole(
    request: ListRoleReq,
    metadata: Metadata,
    callback: (error: ServiceError | null, response: ListRoleResp) => void,
  ): ClientUnaryCall;
  listRole(
    request: ListRoleReq,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (error: ServiceError | null, response: ListRoleResp) => void,
  ): ClientUnaryCall;
  getRoleAuth(
    request: GetRoleAuthReq,
    callback: (error: ServiceError | null, response: GetRoleAuthResp) => void,
  ): ClientUnaryCall;
  getRoleAuth(
    request: GetRoleAuthReq,
    metadata: Metadata,
    callback: (error: ServiceError | null, response: GetRoleAuthResp) => void,
  ): ClientUnaryCall;
  getRoleAuth(
    request: GetRoleAuthReq,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (error: ServiceError | null, response: GetRoleAuthResp) => void,
  ): ClientUnaryCall;
  updateRole(request: UpdateRoleReq, callback: (error: ServiceError | null, response: Empty) => void): ClientUnaryCall;
  updateRole(
    request: UpdateRoleReq,
    metadata: Metadata,
    callback: (error: ServiceError | null, response: Empty) => void,
  ): ClientUnaryCall;
  updateRole(
    request: UpdateRoleReq,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (error: ServiceError | null, response: Empty) => void,
  ): ClientUnaryCall;
  deleteRole(request: DeleteRoleReq, callback: (error: ServiceError | null, response: Empty) => void): ClientUnaryCall;
  deleteRole(
    request: DeleteRoleReq,
    metadata: Metadata,
    callback: (error: ServiceError | null, response: Empty) => void,
  ): ClientUnaryCall;
  deleteRole(
    request: DeleteRoleReq,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (error: ServiceError | null, response: Empty) => void,
  ): ClientUnaryCall;
  bindRole(request: BindRoleReq, callback: (error: ServiceError | null, response: Empty) => void): ClientUnaryCall;
  bindRole(
    request: BindRoleReq,
    metadata: Metadata,
    callback: (error: ServiceError | null, response: Empty) => void,
  ): ClientUnaryCall;
  bindRole(
    request: BindRoleReq,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (error: ServiceError | null, response: Empty) => void,
  ): ClientUnaryCall;
  unBindRole(request: UnBindRoleReq, callback: (error: ServiceError | null, response: Empty) => void): ClientUnaryCall;
  unBindRole(
    request: UnBindRoleReq,
    metadata: Metadata,
    callback: (error: ServiceError | null, response: Empty) => void,
  ): ClientUnaryCall;
  unBindRole(
    request: UnBindRoleReq,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (error: ServiceError | null, response: Empty) => void,
  ): ClientUnaryCall;
}

export const MainClient = makeGenericClientConstructor(MainService, "proto.Main") as unknown as {
  new (address: string, credentials: ChannelCredentials, options?: Partial<ClientOptions>): MainClient;
  service: typeof MainService;
  serviceName: string;
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function longToNumber(long: Long): number {
  if (long.gt(globalThis.Number.MAX_SAFE_INTEGER)) {
    throw new globalThis.Error("Value is larger than Number.MAX_SAFE_INTEGER");
  }
  if (long.lt(globalThis.Number.MIN_SAFE_INTEGER)) {
    throw new globalThis.Error("Value is smaller than Number.MIN_SAFE_INTEGER");
  }
  return long.toNumber();
}

if (_m0.util.Long !== Long) {
  _m0.util.Long = Long as any;
  _m0.configure();
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}
