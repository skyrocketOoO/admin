// @generated by protoc-gen-es v1.10.0 with parameter "target=ts"
// @generated from file main.proto (package proto, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3, protoInt64 } from "@bufbuild/protobuf";
import { ListOption } from "./common_pb.js";
import { Role } from "./model/role_pb.js";

/**
 * @generated from message proto.RasSqlReq
 */
export class RasSqlReq extends Message<RasSqlReq> {
  /**
   * @generated from field: string Sql = 1;
   */
  Sql = "";

  constructor(data?: PartialMessage<RasSqlReq>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "proto.RasSqlReq";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "Sql", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): RasSqlReq {
    return new RasSqlReq().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): RasSqlReq {
    return new RasSqlReq().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): RasSqlReq {
    return new RasSqlReq().fromJsonString(jsonString, options);
  }

  static equals(a: RasSqlReq | PlainMessage<RasSqlReq> | undefined, b: RasSqlReq | PlainMessage<RasSqlReq> | undefined): boolean {
    return proto3.util.equals(RasSqlReq, a, b);
  }
}

/**
 * @generated from message proto.RasSqlResp
 */
export class RasSqlResp extends Message<RasSqlResp> {
  /**
   * @generated from field: string jsonData = 1;
   */
  jsonData = "";

  constructor(data?: PartialMessage<RasSqlResp>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "proto.RasSqlResp";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "jsonData", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): RasSqlResp {
    return new RasSqlResp().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): RasSqlResp {
    return new RasSqlResp().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): RasSqlResp {
    return new RasSqlResp().fromJsonString(jsonString, options);
  }

  static equals(a: RasSqlResp | PlainMessage<RasSqlResp> | undefined, b: RasSqlResp | PlainMessage<RasSqlResp> | undefined): boolean {
    return proto3.util.equals(RasSqlResp, a, b);
  }
}

/**
 * @generated from message proto.CreateAccountReq
 */
export class CreateAccountReq extends Message<CreateAccountReq> {
  /**
   * @generated from field: string UserName = 1;
   */
  UserName = "";

  /**
   * @generated from field: string Password = 2;
   */
  Password = "";

  /**
   * @generated from field: string DisplayName = 3;
   */
  DisplayName = "";

  /**
   * @generated from field: optional uint32 RoleID = 4;
   */
  RoleID?: number;

  constructor(data?: PartialMessage<CreateAccountReq>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "proto.CreateAccountReq";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "UserName", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "Password", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "DisplayName", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "RoleID", kind: "scalar", T: 13 /* ScalarType.UINT32 */, opt: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CreateAccountReq {
    return new CreateAccountReq().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CreateAccountReq {
    return new CreateAccountReq().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CreateAccountReq {
    return new CreateAccountReq().fromJsonString(jsonString, options);
  }

  static equals(a: CreateAccountReq | PlainMessage<CreateAccountReq> | undefined, b: CreateAccountReq | PlainMessage<CreateAccountReq> | undefined): boolean {
    return proto3.util.equals(CreateAccountReq, a, b);
  }
}

/**
 * @generated from message proto.ListAccountReq
 */
export class ListAccountReq extends Message<ListAccountReq> {
  /**
   * @generated from field: optional proto.ListOption Option = 1;
   */
  Option?: ListOption;

  constructor(data?: PartialMessage<ListAccountReq>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "proto.ListAccountReq";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "Option", kind: "message", T: ListOption, opt: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListAccountReq {
    return new ListAccountReq().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListAccountReq {
    return new ListAccountReq().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListAccountReq {
    return new ListAccountReq().fromJsonString(jsonString, options);
  }

  static equals(a: ListAccountReq | PlainMessage<ListAccountReq> | undefined, b: ListAccountReq | PlainMessage<ListAccountReq> | undefined): boolean {
    return proto3.util.equals(ListAccountReq, a, b);
  }
}

/**
 * @generated from message proto.ListAccountResp
 */
export class ListAccountResp extends Message<ListAccountResp> {
  /**
   * @generated from field: repeated proto.Account List = 1;
   */
  List: Account[] = [];

  /**
   * @generated from field: int64 Total = 2;
   */
  Total = protoInt64.zero;

  constructor(data?: PartialMessage<ListAccountResp>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "proto.ListAccountResp";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "List", kind: "message", T: Account, repeated: true },
    { no: 2, name: "Total", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListAccountResp {
    return new ListAccountResp().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListAccountResp {
    return new ListAccountResp().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListAccountResp {
    return new ListAccountResp().fromJsonString(jsonString, options);
  }

  static equals(a: ListAccountResp | PlainMessage<ListAccountResp> | undefined, b: ListAccountResp | PlainMessage<ListAccountResp> | undefined): boolean {
    return proto3.util.equals(ListAccountResp, a, b);
  }
}

/**
 * @generated from message proto.Account
 */
export class Account extends Message<Account> {
  /**
   * @generated from field: int32 ID = 1;
   */
  ID = 0;

  /**
   * @generated from field: string UserName = 2;
   */
  UserName = "";

  /**
   * @generated from field: string DisplayName = 3;
   */
  DisplayName = "";

  /**
   * @generated from field: string Email = 4;
   */
  Email = "";

  /**
   * @generated from field: int32 State = 5;
   */
  State = 0;

  constructor(data?: PartialMessage<Account>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "proto.Account";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "ID", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 2, name: "UserName", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "DisplayName", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "Email", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "State", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Account {
    return new Account().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Account {
    return new Account().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Account {
    return new Account().fromJsonString(jsonString, options);
  }

  static equals(a: Account | PlainMessage<Account> | undefined, b: Account | PlainMessage<Account> | undefined): boolean {
    return proto3.util.equals(Account, a, b);
  }
}

/**
 * @generated from message proto.UpdateAccountReq
 */
export class UpdateAccountReq extends Message<UpdateAccountReq> {
  /**
   * @generated from field: string ID = 1;
   */
  ID = "";

  /**
   * @generated from field: string DisplayName = 2;
   */
  DisplayName = "";

  /**
   * 0: no change, 1: active, 2: inactive
   *
   * @generated from field: int32 State = 3;
   */
  State = 0;

  constructor(data?: PartialMessage<UpdateAccountReq>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "proto.UpdateAccountReq";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "ID", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "DisplayName", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "State", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UpdateAccountReq {
    return new UpdateAccountReq().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UpdateAccountReq {
    return new UpdateAccountReq().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UpdateAccountReq {
    return new UpdateAccountReq().fromJsonString(jsonString, options);
  }

  static equals(a: UpdateAccountReq | PlainMessage<UpdateAccountReq> | undefined, b: UpdateAccountReq | PlainMessage<UpdateAccountReq> | undefined): boolean {
    return proto3.util.equals(UpdateAccountReq, a, b);
  }
}

/**
 * @generated from message proto.DeleteAccountReq
 */
export class DeleteAccountReq extends Message<DeleteAccountReq> {
  /**
   * @generated from field: string ID = 1;
   */
  ID = "";

  /**
   * @generated from field: proto.Page Page = 2;
   */
  Page?: Page;

  constructor(data?: PartialMessage<DeleteAccountReq>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "proto.DeleteAccountReq";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "ID", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "Page", kind: "message", T: Page },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DeleteAccountReq {
    return new DeleteAccountReq().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DeleteAccountReq {
    return new DeleteAccountReq().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DeleteAccountReq {
    return new DeleteAccountReq().fromJsonString(jsonString, options);
  }

  static equals(a: DeleteAccountReq | PlainMessage<DeleteAccountReq> | undefined, b: DeleteAccountReq | PlainMessage<DeleteAccountReq> | undefined): boolean {
    return proto3.util.equals(DeleteAccountReq, a, b);
  }
}

/**
 * @generated from message proto.CreateRoleReq
 */
export class CreateRoleReq extends Message<CreateRoleReq> {
  /**
   * @generated from field: string Name = 1;
   */
  Name = "";

  /**
   * @generated from field: proto.Page Page = 2;
   */
  Page?: Page;

  constructor(data?: PartialMessage<CreateRoleReq>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "proto.CreateRoleReq";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "Name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "Page", kind: "message", T: Page },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CreateRoleReq {
    return new CreateRoleReq().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CreateRoleReq {
    return new CreateRoleReq().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CreateRoleReq {
    return new CreateRoleReq().fromJsonString(jsonString, options);
  }

  static equals(a: CreateRoleReq | PlainMessage<CreateRoleReq> | undefined, b: CreateRoleReq | PlainMessage<CreateRoleReq> | undefined): boolean {
    return proto3.util.equals(CreateRoleReq, a, b);
  }
}

/**
 * @generated from message proto.Page
 */
export class Page extends Message<Page> {
  /**
   * @generated from field: proto.PageOperation AccountList = 1;
   */
  AccountList?: PageOperation;

  /**
   * @generated from field: proto.PageOperation Role = 2;
   */
  Role?: PageOperation;

  /**
   * @generated from field: proto.PageOperation Setting = 3;
   */
  Setting?: PageOperation;

  constructor(data?: PartialMessage<Page>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "proto.Page";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "AccountList", kind: "message", T: PageOperation },
    { no: 2, name: "Role", kind: "message", T: PageOperation },
    { no: 3, name: "Setting", kind: "message", T: PageOperation },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Page {
    return new Page().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Page {
    return new Page().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Page {
    return new Page().fromJsonString(jsonString, options);
  }

  static equals(a: Page | PlainMessage<Page> | undefined, b: Page | PlainMessage<Page> | undefined): boolean {
    return proto3.util.equals(Page, a, b);
  }
}

/**
 * @generated from message proto.PageOperation
 */
export class PageOperation extends Message<PageOperation> {
  /**
   * @generated from field: bool Create = 1;
   */
  Create = false;

  /**
   * @generated from field: bool Read = 2;
   */
  Read = false;

  /**
   * @generated from field: bool Update = 3;
   */
  Update = false;

  /**
   * @generated from field: bool Delete = 4;
   */
  Delete = false;

  constructor(data?: PartialMessage<PageOperation>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "proto.PageOperation";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "Create", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 2, name: "Read", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 3, name: "Update", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 4, name: "Delete", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): PageOperation {
    return new PageOperation().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): PageOperation {
    return new PageOperation().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): PageOperation {
    return new PageOperation().fromJsonString(jsonString, options);
  }

  static equals(a: PageOperation | PlainMessage<PageOperation> | undefined, b: PageOperation | PlainMessage<PageOperation> | undefined): boolean {
    return proto3.util.equals(PageOperation, a, b);
  }
}

/**
 * @generated from message proto.ListRoleReq
 */
export class ListRoleReq extends Message<ListRoleReq> {
  /**
   * @generated from field: optional proto.ListOption Option = 1;
   */
  Option?: ListOption;

  constructor(data?: PartialMessage<ListRoleReq>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "proto.ListRoleReq";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "Option", kind: "message", T: ListOption, opt: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListRoleReq {
    return new ListRoleReq().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListRoleReq {
    return new ListRoleReq().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListRoleReq {
    return new ListRoleReq().fromJsonString(jsonString, options);
  }

  static equals(a: ListRoleReq | PlainMessage<ListRoleReq> | undefined, b: ListRoleReq | PlainMessage<ListRoleReq> | undefined): boolean {
    return proto3.util.equals(ListRoleReq, a, b);
  }
}

/**
 * @generated from message proto.ListRoleResp
 */
export class ListRoleResp extends Message<ListRoleResp> {
  /**
   * @generated from field: repeated proto.RoleData List = 1;
   */
  List: RoleData[] = [];

  /**
   * @generated from field: int64 Total = 2;
   */
  Total = protoInt64.zero;

  constructor(data?: PartialMessage<ListRoleResp>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "proto.ListRoleResp";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "List", kind: "message", T: RoleData, repeated: true },
    { no: 2, name: "Total", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListRoleResp {
    return new ListRoleResp().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListRoleResp {
    return new ListRoleResp().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListRoleResp {
    return new ListRoleResp().fromJsonString(jsonString, options);
  }

  static equals(a: ListRoleResp | PlainMessage<ListRoleResp> | undefined, b: ListRoleResp | PlainMessage<ListRoleResp> | undefined): boolean {
    return proto3.util.equals(ListRoleResp, a, b);
  }
}

/**
 * @generated from message proto.RoleData
 */
export class RoleData extends Message<RoleData> {
  /**
   * @generated from field: string ID = 1;
   */
  ID = "";

  /**
   * @generated from field: string Name = 2;
   */
  Name = "";

  constructor(data?: PartialMessage<RoleData>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "proto.RoleData";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "ID", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "Name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): RoleData {
    return new RoleData().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): RoleData {
    return new RoleData().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): RoleData {
    return new RoleData().fromJsonString(jsonString, options);
  }

  static equals(a: RoleData | PlainMessage<RoleData> | undefined, b: RoleData | PlainMessage<RoleData> | undefined): boolean {
    return proto3.util.equals(RoleData, a, b);
  }
}

/**
 * @generated from message proto.GetRoleAuthReq
 */
export class GetRoleAuthReq extends Message<GetRoleAuthReq> {
  /**
   * if ID is "", return auth based on session
   *
   * @generated from field: optional string ID = 1;
   */
  ID?: string;

  constructor(data?: PartialMessage<GetRoleAuthReq>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "proto.GetRoleAuthReq";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "ID", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetRoleAuthReq {
    return new GetRoleAuthReq().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetRoleAuthReq {
    return new GetRoleAuthReq().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetRoleAuthReq {
    return new GetRoleAuthReq().fromJsonString(jsonString, options);
  }

  static equals(a: GetRoleAuthReq | PlainMessage<GetRoleAuthReq> | undefined, b: GetRoleAuthReq | PlainMessage<GetRoleAuthReq> | undefined): boolean {
    return proto3.util.equals(GetRoleAuthReq, a, b);
  }
}

/**
 * @generated from message proto.GetRoleAuthResp
 */
export class GetRoleAuthResp extends Message<GetRoleAuthResp> {
  /**
   * @generated from field: proto.Page Page = 1;
   */
  Page?: Page;

  constructor(data?: PartialMessage<GetRoleAuthResp>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "proto.GetRoleAuthResp";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "Page", kind: "message", T: Page },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetRoleAuthResp {
    return new GetRoleAuthResp().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetRoleAuthResp {
    return new GetRoleAuthResp().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetRoleAuthResp {
    return new GetRoleAuthResp().fromJsonString(jsonString, options);
  }

  static equals(a: GetRoleAuthResp | PlainMessage<GetRoleAuthResp> | undefined, b: GetRoleAuthResp | PlainMessage<GetRoleAuthResp> | undefined): boolean {
    return proto3.util.equals(GetRoleAuthResp, a, b);
  }
}

/**
 * @generated from message proto.UpdateRoleReq
 */
export class UpdateRoleReq extends Message<UpdateRoleReq> {
  /**
   * @generated from field: string ID = 1;
   */
  ID = "";

  /**
   * @generated from field: string Name = 2;
   */
  Name = "";

  /**
   * @generated from field: proto.Page Page = 3;
   */
  Page?: Page;

  constructor(data?: PartialMessage<UpdateRoleReq>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "proto.UpdateRoleReq";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "ID", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "Name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "Page", kind: "message", T: Page },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UpdateRoleReq {
    return new UpdateRoleReq().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UpdateRoleReq {
    return new UpdateRoleReq().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UpdateRoleReq {
    return new UpdateRoleReq().fromJsonString(jsonString, options);
  }

  static equals(a: UpdateRoleReq | PlainMessage<UpdateRoleReq> | undefined, b: UpdateRoleReq | PlainMessage<UpdateRoleReq> | undefined): boolean {
    return proto3.util.equals(UpdateRoleReq, a, b);
  }
}

/**
 * @generated from message proto.DeleteRoleReq
 */
export class DeleteRoleReq extends Message<DeleteRoleReq> {
  /**
   * @generated from field: string ID = 1;
   */
  ID = "";

  constructor(data?: PartialMessage<DeleteRoleReq>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "proto.DeleteRoleReq";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "ID", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DeleteRoleReq {
    return new DeleteRoleReq().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DeleteRoleReq {
    return new DeleteRoleReq().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DeleteRoleReq {
    return new DeleteRoleReq().fromJsonString(jsonString, options);
  }

  static equals(a: DeleteRoleReq | PlainMessage<DeleteRoleReq> | undefined, b: DeleteRoleReq | PlainMessage<DeleteRoleReq> | undefined): boolean {
    return proto3.util.equals(DeleteRoleReq, a, b);
  }
}

/**
 * @generated from message proto.BindRoleReq
 */
export class BindRoleReq extends Message<BindRoleReq> {
  /**
   * @generated from field: string AccountID = 1;
   */
  AccountID = "";

  /**
   * @generated from field: string RoleID = 2;
   */
  RoleID = "";

  constructor(data?: PartialMessage<BindRoleReq>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "proto.BindRoleReq";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "AccountID", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "RoleID", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): BindRoleReq {
    return new BindRoleReq().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): BindRoleReq {
    return new BindRoleReq().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): BindRoleReq {
    return new BindRoleReq().fromJsonString(jsonString, options);
  }

  static equals(a: BindRoleReq | PlainMessage<BindRoleReq> | undefined, b: BindRoleReq | PlainMessage<BindRoleReq> | undefined): boolean {
    return proto3.util.equals(BindRoleReq, a, b);
  }
}

/**
 * @generated from message proto.UnBindRoleReq
 */
export class UnBindRoleReq extends Message<UnBindRoleReq> {
  /**
   * @generated from field: string AccountID = 1;
   */
  AccountID = "";

  constructor(data?: PartialMessage<UnBindRoleReq>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "proto.UnBindRoleReq";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "AccountID", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UnBindRoleReq {
    return new UnBindRoleReq().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UnBindRoleReq {
    return new UnBindRoleReq().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UnBindRoleReq {
    return new UnBindRoleReq().fromJsonString(jsonString, options);
  }

  static equals(a: UnBindRoleReq | PlainMessage<UnBindRoleReq> | undefined, b: UnBindRoleReq | PlainMessage<UnBindRoleReq> | undefined): boolean {
    return proto3.util.equals(UnBindRoleReq, a, b);
  }
}

/**
 * @generated from message proto.LoginReq
 */
export class LoginReq extends Message<LoginReq> {
  /**
   * @generated from field: string UserName = 1;
   */
  UserName = "";

  /**
   * @generated from field: string Password = 2;
   */
  Password = "";

  constructor(data?: PartialMessage<LoginReq>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "proto.LoginReq";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "UserName", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "Password", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): LoginReq {
    return new LoginReq().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): LoginReq {
    return new LoginReq().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): LoginReq {
    return new LoginReq().fromJsonString(jsonString, options);
  }

  static equals(a: LoginReq | PlainMessage<LoginReq> | undefined, b: LoginReq | PlainMessage<LoginReq> | undefined): boolean {
    return proto3.util.equals(LoginReq, a, b);
  }
}

/**
 * @generated from message proto.LoginResp
 */
export class LoginResp extends Message<LoginResp> {
  /**
   * @generated from field: string SessionID = 1;
   */
  SessionID = "";

  /**
   * @generated from field: proto.model.Role Role = 2;
   */
  Role?: Role;

  constructor(data?: PartialMessage<LoginResp>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "proto.LoginResp";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "SessionID", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "Role", kind: "message", T: Role },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): LoginResp {
    return new LoginResp().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): LoginResp {
    return new LoginResp().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): LoginResp {
    return new LoginResp().fromJsonString(jsonString, options);
  }

  static equals(a: LoginResp | PlainMessage<LoginResp> | undefined, b: LoginResp | PlainMessage<LoginResp> | undefined): boolean {
    return proto3.util.equals(LoginResp, a, b);
  }
}

/**
 * @generated from message proto.LogoutReq
 */
export class LogoutReq extends Message<LogoutReq> {
  /**
   * @generated from field: string SessionID = 1;
   */
  SessionID = "";

  constructor(data?: PartialMessage<LogoutReq>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "proto.LogoutReq";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "SessionID", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): LogoutReq {
    return new LogoutReq().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): LogoutReq {
    return new LogoutReq().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): LogoutReq {
    return new LogoutReq().fromJsonString(jsonString, options);
  }

  static equals(a: LogoutReq | PlainMessage<LogoutReq> | undefined, b: LogoutReq | PlainMessage<LogoutReq> | undefined): boolean {
    return proto3.util.equals(LogoutReq, a, b);
  }
}

