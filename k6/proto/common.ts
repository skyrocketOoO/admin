// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               unknown
// source: common.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";

export const protobufPackage = "proto";

export interface Empty {
}

export interface ListOption {
  Pager?: Pager | undefined;
  Sorter?: Sorter | undefined;
  Query: Query[];
}

export interface Pager {
  Number: number;
  Size: number;
}

export interface Sorter {
  Asc: boolean;
  Field: string;
}

export interface Query {
  Fuzzy: boolean;
  Fields: string[];
  Value: string;
}

function createBaseEmpty(): Empty {
  return {};
}

export const Empty: MessageFns<Empty> = {
  encode(_: Empty, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Empty {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseEmpty();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): Empty {
    return {};
  },

  toJSON(_: Empty): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<Empty>, I>>(base?: I): Empty {
    return Empty.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Empty>, I>>(_: I): Empty {
    const message = createBaseEmpty();
    return message;
  },
};

function createBaseListOption(): ListOption {
  return { Pager: undefined, Sorter: undefined, Query: [] };
}

export const ListOption: MessageFns<ListOption> = {
  encode(message: ListOption, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.Pager !== undefined) {
      Pager.encode(message.Pager, writer.uint32(10).fork()).join();
    }
    if (message.Sorter !== undefined) {
      Sorter.encode(message.Sorter, writer.uint32(18).fork()).join();
    }
    for (const v of message.Query) {
      Query.encode(v!, writer.uint32(26).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListOption {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListOption();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.Pager = Pager.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.Sorter = Sorter.decode(reader, reader.uint32());
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.Query.push(Query.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListOption {
    return {
      Pager: isSet(object.Pager) ? Pager.fromJSON(object.Pager) : undefined,
      Sorter: isSet(object.Sorter) ? Sorter.fromJSON(object.Sorter) : undefined,
      Query: globalThis.Array.isArray(object?.Query) ? object.Query.map((e: any) => Query.fromJSON(e)) : [],
    };
  },

  toJSON(message: ListOption): unknown {
    const obj: any = {};
    if (message.Pager !== undefined) {
      obj.Pager = Pager.toJSON(message.Pager);
    }
    if (message.Sorter !== undefined) {
      obj.Sorter = Sorter.toJSON(message.Sorter);
    }
    if (message.Query?.length) {
      obj.Query = message.Query.map((e) => Query.toJSON(e));
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ListOption>, I>>(base?: I): ListOption {
    return ListOption.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ListOption>, I>>(object: I): ListOption {
    const message = createBaseListOption();
    message.Pager = (object.Pager !== undefined && object.Pager !== null) ? Pager.fromPartial(object.Pager) : undefined;
    message.Sorter = (object.Sorter !== undefined && object.Sorter !== null)
      ? Sorter.fromPartial(object.Sorter)
      : undefined;
    message.Query = object.Query?.map((e) => Query.fromPartial(e)) || [];
    return message;
  },
};

function createBasePager(): Pager {
  return { Number: 0, Size: 0 };
}

export const Pager: MessageFns<Pager> = {
  encode(message: Pager, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.Number !== 0) {
      writer.uint32(8).int32(message.Number);
    }
    if (message.Size !== 0) {
      writer.uint32(16).int32(message.Size);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Pager {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBasePager();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.Number = reader.int32();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.Size = reader.int32();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Pager {
    return {
      Number: isSet(object.Number) ? globalThis.Number(object.Number) : 0,
      Size: isSet(object.Size) ? globalThis.Number(object.Size) : 0,
    };
  },

  toJSON(message: Pager): unknown {
    const obj: any = {};
    if (message.Number !== 0) {
      obj.Number = Math.round(message.Number);
    }
    if (message.Size !== 0) {
      obj.Size = Math.round(message.Size);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<Pager>, I>>(base?: I): Pager {
    return Pager.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Pager>, I>>(object: I): Pager {
    const message = createBasePager();
    message.Number = object.Number ?? 0;
    message.Size = object.Size ?? 0;
    return message;
  },
};

function createBaseSorter(): Sorter {
  return { Asc: false, Field: "" };
}

export const Sorter: MessageFns<Sorter> = {
  encode(message: Sorter, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.Asc !== false) {
      writer.uint32(8).bool(message.Asc);
    }
    if (message.Field !== "") {
      writer.uint32(18).string(message.Field);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Sorter {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSorter();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.Asc = reader.bool();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.Field = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Sorter {
    return {
      Asc: isSet(object.Asc) ? globalThis.Boolean(object.Asc) : false,
      Field: isSet(object.Field) ? globalThis.String(object.Field) : "",
    };
  },

  toJSON(message: Sorter): unknown {
    const obj: any = {};
    if (message.Asc !== false) {
      obj.Asc = message.Asc;
    }
    if (message.Field !== "") {
      obj.Field = message.Field;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<Sorter>, I>>(base?: I): Sorter {
    return Sorter.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Sorter>, I>>(object: I): Sorter {
    const message = createBaseSorter();
    message.Asc = object.Asc ?? false;
    message.Field = object.Field ?? "";
    return message;
  },
};

function createBaseQuery(): Query {
  return { Fuzzy: false, Fields: [], Value: "" };
}

export const Query: MessageFns<Query> = {
  encode(message: Query, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.Fuzzy !== false) {
      writer.uint32(8).bool(message.Fuzzy);
    }
    for (const v of message.Fields) {
      writer.uint32(18).string(v!);
    }
    if (message.Value !== "") {
      writer.uint32(26).string(message.Value);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Query {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQuery();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.Fuzzy = reader.bool();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.Fields.push(reader.string());
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.Value = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Query {
    return {
      Fuzzy: isSet(object.Fuzzy) ? globalThis.Boolean(object.Fuzzy) : false,
      Fields: globalThis.Array.isArray(object?.Fields) ? object.Fields.map((e: any) => globalThis.String(e)) : [],
      Value: isSet(object.Value) ? globalThis.String(object.Value) : "",
    };
  },

  toJSON(message: Query): unknown {
    const obj: any = {};
    if (message.Fuzzy !== false) {
      obj.Fuzzy = message.Fuzzy;
    }
    if (message.Fields?.length) {
      obj.Fields = message.Fields;
    }
    if (message.Value !== "") {
      obj.Value = message.Value;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<Query>, I>>(base?: I): Query {
    return Query.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Query>, I>>(object: I): Query {
    const message = createBaseQuery();
    message.Fuzzy = object.Fuzzy ?? false;
    message.Fields = object.Fields?.map((e) => e) || [];
    message.Value = object.Value ?? "";
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
