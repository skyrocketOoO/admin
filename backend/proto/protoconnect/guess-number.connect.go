// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: guess-number.proto

package protoconnect

import (
	proto "admin/proto"
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// SideProjectServiceName is the fully-qualified name of the SideProjectService service.
	SideProjectServiceName = "proto.SideProjectService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// SideProjectServiceGuessNumberProcedure is the fully-qualified name of the SideProjectService's
	// GuessNumber RPC.
	SideProjectServiceGuessNumberProcedure = "/proto.SideProjectService/GuessNumber"
)

// These variables are the protoreflect.Descriptor objects for the RPCs defined in this package.
var (
	sideProjectServiceServiceDescriptor           = proto.File_guess_number_proto.Services().ByName("SideProjectService")
	sideProjectServiceGuessNumberMethodDescriptor = sideProjectServiceServiceDescriptor.Methods().ByName("GuessNumber")
)

// SideProjectServiceClient is a client for the proto.SideProjectService service.
type SideProjectServiceClient interface {
	GuessNumber(context.Context, *connect.Request[proto.GuessNumberReq]) (*connect.Response[proto.GuessNubmerResp], error)
}

// NewSideProjectServiceClient constructs a client for the proto.SideProjectService service. By
// default, it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses,
// and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the
// connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewSideProjectServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) SideProjectServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &sideProjectServiceClient{
		guessNumber: connect.NewClient[proto.GuessNumberReq, proto.GuessNubmerResp](
			httpClient,
			baseURL+SideProjectServiceGuessNumberProcedure,
			connect.WithSchema(sideProjectServiceGuessNumberMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
	}
}

// sideProjectServiceClient implements SideProjectServiceClient.
type sideProjectServiceClient struct {
	guessNumber *connect.Client[proto.GuessNumberReq, proto.GuessNubmerResp]
}

// GuessNumber calls proto.SideProjectService.GuessNumber.
func (c *sideProjectServiceClient) GuessNumber(ctx context.Context, req *connect.Request[proto.GuessNumberReq]) (*connect.Response[proto.GuessNubmerResp], error) {
	return c.guessNumber.CallUnary(ctx, req)
}

// SideProjectServiceHandler is an implementation of the proto.SideProjectService service.
type SideProjectServiceHandler interface {
	GuessNumber(context.Context, *connect.Request[proto.GuessNumberReq]) (*connect.Response[proto.GuessNubmerResp], error)
}

// NewSideProjectServiceHandler builds an HTTP handler from the service implementation. It returns
// the path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewSideProjectServiceHandler(svc SideProjectServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	sideProjectServiceGuessNumberHandler := connect.NewUnaryHandler(
		SideProjectServiceGuessNumberProcedure,
		svc.GuessNumber,
		connect.WithSchema(sideProjectServiceGuessNumberMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	return "/proto.SideProjectService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case SideProjectServiceGuessNumberProcedure:
			sideProjectServiceGuessNumberHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedSideProjectServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedSideProjectServiceHandler struct{}

func (UnimplementedSideProjectServiceHandler) GuessNumber(context.Context, *connect.Request[proto.GuessNumberReq]) (*connect.Response[proto.GuessNubmerResp], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("proto.SideProjectService.GuessNumber is not implemented"))
}
