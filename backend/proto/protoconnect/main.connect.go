// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: main.proto

package protoconnect

import (
	proto "admin/proto"
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// MainServiceName is the fully-qualified name of the MainService service.
	MainServiceName = "proto.MainService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// MainServiceRawSqlProcedure is the fully-qualified name of the MainService's RawSql RPC.
	MainServiceRawSqlProcedure = "/proto.MainService/RawSql"
	// MainServiceLoginProcedure is the fully-qualified name of the MainService's Login RPC.
	MainServiceLoginProcedure = "/proto.MainService/Login"
	// MainServiceLogoutProcedure is the fully-qualified name of the MainService's Logout RPC.
	MainServiceLogoutProcedure = "/proto.MainService/Logout"
	// MainServiceCreateAccountProcedure is the fully-qualified name of the MainService's CreateAccount
	// RPC.
	MainServiceCreateAccountProcedure = "/proto.MainService/CreateAccount"
	// MainServiceListAccountProcedure is the fully-qualified name of the MainService's ListAccount RPC.
	MainServiceListAccountProcedure = "/proto.MainService/ListAccount"
	// MainServiceUpdateAccountProcedure is the fully-qualified name of the MainService's UpdateAccount
	// RPC.
	MainServiceUpdateAccountProcedure = "/proto.MainService/UpdateAccount"
	// MainServiceDeleteAccountProcedure is the fully-qualified name of the MainService's DeleteAccount
	// RPC.
	MainServiceDeleteAccountProcedure = "/proto.MainService/DeleteAccount"
	// MainServiceDeactiveAccountProcedure is the fully-qualified name of the MainService's
	// DeactiveAccount RPC.
	MainServiceDeactiveAccountProcedure = "/proto.MainService/DeactiveAccount"
	// MainServiceActiveAccountProcedure is the fully-qualified name of the MainService's ActiveAccount
	// RPC.
	MainServiceActiveAccountProcedure = "/proto.MainService/ActiveAccount"
	// MainServiceCreateRoleProcedure is the fully-qualified name of the MainService's CreateRole RPC.
	MainServiceCreateRoleProcedure = "/proto.MainService/CreateRole"
	// MainServiceListRoleProcedure is the fully-qualified name of the MainService's ListRole RPC.
	MainServiceListRoleProcedure = "/proto.MainService/ListRole"
	// MainServiceGetRoleAuthProcedure is the fully-qualified name of the MainService's GetRoleAuth RPC.
	MainServiceGetRoleAuthProcedure = "/proto.MainService/GetRoleAuth"
	// MainServiceUpdateRoleProcedure is the fully-qualified name of the MainService's UpdateRole RPC.
	MainServiceUpdateRoleProcedure = "/proto.MainService/UpdateRole"
	// MainServiceDeleteRoleProcedure is the fully-qualified name of the MainService's DeleteRole RPC.
	MainServiceDeleteRoleProcedure = "/proto.MainService/DeleteRole"
	// MainServiceBindRoleProcedure is the fully-qualified name of the MainService's BindRole RPC.
	MainServiceBindRoleProcedure = "/proto.MainService/BindRole"
	// MainServiceUnBindRoleProcedure is the fully-qualified name of the MainService's UnBindRole RPC.
	MainServiceUnBindRoleProcedure = "/proto.MainService/UnBindRole"
)

// These variables are the protoreflect.Descriptor objects for the RPCs defined in this package.
var (
	mainServiceServiceDescriptor               = proto.File_main_proto.Services().ByName("MainService")
	mainServiceRawSqlMethodDescriptor          = mainServiceServiceDescriptor.Methods().ByName("RawSql")
	mainServiceLoginMethodDescriptor           = mainServiceServiceDescriptor.Methods().ByName("Login")
	mainServiceLogoutMethodDescriptor          = mainServiceServiceDescriptor.Methods().ByName("Logout")
	mainServiceCreateAccountMethodDescriptor   = mainServiceServiceDescriptor.Methods().ByName("CreateAccount")
	mainServiceListAccountMethodDescriptor     = mainServiceServiceDescriptor.Methods().ByName("ListAccount")
	mainServiceUpdateAccountMethodDescriptor   = mainServiceServiceDescriptor.Methods().ByName("UpdateAccount")
	mainServiceDeleteAccountMethodDescriptor   = mainServiceServiceDescriptor.Methods().ByName("DeleteAccount")
	mainServiceDeactiveAccountMethodDescriptor = mainServiceServiceDescriptor.Methods().ByName("DeactiveAccount")
	mainServiceActiveAccountMethodDescriptor   = mainServiceServiceDescriptor.Methods().ByName("ActiveAccount")
	mainServiceCreateRoleMethodDescriptor      = mainServiceServiceDescriptor.Methods().ByName("CreateRole")
	mainServiceListRoleMethodDescriptor        = mainServiceServiceDescriptor.Methods().ByName("ListRole")
	mainServiceGetRoleAuthMethodDescriptor     = mainServiceServiceDescriptor.Methods().ByName("GetRoleAuth")
	mainServiceUpdateRoleMethodDescriptor      = mainServiceServiceDescriptor.Methods().ByName("UpdateRole")
	mainServiceDeleteRoleMethodDescriptor      = mainServiceServiceDescriptor.Methods().ByName("DeleteRole")
	mainServiceBindRoleMethodDescriptor        = mainServiceServiceDescriptor.Methods().ByName("BindRole")
	mainServiceUnBindRoleMethodDescriptor      = mainServiceServiceDescriptor.Methods().ByName("UnBindRole")
)

// MainServiceClient is a client for the proto.MainService service.
type MainServiceClient interface {
	RawSql(context.Context, *connect.Request[proto.RasSqlReq]) (*connect.Response[proto.RasSqlResp], error)
	Login(context.Context, *connect.Request[proto.LoginReq]) (*connect.Response[proto.LoginResp], error)
	Logout(context.Context, *connect.Request[proto.LogoutReq]) (*connect.Response[proto.Empty], error)
	CreateAccount(context.Context, *connect.Request[proto.CreateAccountReq]) (*connect.Response[proto.Empty], error)
	ListAccount(context.Context, *connect.Request[proto.ListAccountReq]) (*connect.Response[proto.ListAccountResp], error)
	UpdateAccount(context.Context, *connect.Request[proto.UpdateAccountReq]) (*connect.Response[proto.Empty], error)
	DeleteAccount(context.Context, *connect.Request[proto.DeleteAccountReq]) (*connect.Response[proto.Empty], error)
	DeactiveAccount(context.Context, *connect.Request[proto.DeleteAccountReq]) (*connect.Response[proto.Empty], error)
	ActiveAccount(context.Context, *connect.Request[proto.DeleteAccountReq]) (*connect.Response[proto.Empty], error)
	CreateRole(context.Context, *connect.Request[proto.CreateRoleReq]) (*connect.Response[proto.Empty], error)
	ListRole(context.Context, *connect.Request[proto.ListRoleReq]) (*connect.Response[proto.ListRoleResp], error)
	GetRoleAuth(context.Context, *connect.Request[proto.GetRoleAuthReq]) (*connect.Response[proto.GetRoleAuthResp], error)
	UpdateRole(context.Context, *connect.Request[proto.UpdateRoleReq]) (*connect.Response[proto.Empty], error)
	DeleteRole(context.Context, *connect.Request[proto.DeleteRoleReq]) (*connect.Response[proto.Empty], error)
	BindRole(context.Context, *connect.Request[proto.BindRoleReq]) (*connect.Response[proto.Empty], error)
	UnBindRole(context.Context, *connect.Request[proto.UnBindRoleReq]) (*connect.Response[proto.Empty], error)
}

// NewMainServiceClient constructs a client for the proto.MainService service. By default, it uses
// the Connect protocol with the binary Protobuf Codec, asks for gzipped responses, and sends
// uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC() or
// connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewMainServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) MainServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &mainServiceClient{
		rawSql: connect.NewClient[proto.RasSqlReq, proto.RasSqlResp](
			httpClient,
			baseURL+MainServiceRawSqlProcedure,
			connect.WithSchema(mainServiceRawSqlMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		login: connect.NewClient[proto.LoginReq, proto.LoginResp](
			httpClient,
			baseURL+MainServiceLoginProcedure,
			connect.WithSchema(mainServiceLoginMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		logout: connect.NewClient[proto.LogoutReq, proto.Empty](
			httpClient,
			baseURL+MainServiceLogoutProcedure,
			connect.WithSchema(mainServiceLogoutMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		createAccount: connect.NewClient[proto.CreateAccountReq, proto.Empty](
			httpClient,
			baseURL+MainServiceCreateAccountProcedure,
			connect.WithSchema(mainServiceCreateAccountMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		listAccount: connect.NewClient[proto.ListAccountReq, proto.ListAccountResp](
			httpClient,
			baseURL+MainServiceListAccountProcedure,
			connect.WithSchema(mainServiceListAccountMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		updateAccount: connect.NewClient[proto.UpdateAccountReq, proto.Empty](
			httpClient,
			baseURL+MainServiceUpdateAccountProcedure,
			connect.WithSchema(mainServiceUpdateAccountMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		deleteAccount: connect.NewClient[proto.DeleteAccountReq, proto.Empty](
			httpClient,
			baseURL+MainServiceDeleteAccountProcedure,
			connect.WithSchema(mainServiceDeleteAccountMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		deactiveAccount: connect.NewClient[proto.DeleteAccountReq, proto.Empty](
			httpClient,
			baseURL+MainServiceDeactiveAccountProcedure,
			connect.WithSchema(mainServiceDeactiveAccountMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		activeAccount: connect.NewClient[proto.DeleteAccountReq, proto.Empty](
			httpClient,
			baseURL+MainServiceActiveAccountProcedure,
			connect.WithSchema(mainServiceActiveAccountMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		createRole: connect.NewClient[proto.CreateRoleReq, proto.Empty](
			httpClient,
			baseURL+MainServiceCreateRoleProcedure,
			connect.WithSchema(mainServiceCreateRoleMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		listRole: connect.NewClient[proto.ListRoleReq, proto.ListRoleResp](
			httpClient,
			baseURL+MainServiceListRoleProcedure,
			connect.WithSchema(mainServiceListRoleMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		getRoleAuth: connect.NewClient[proto.GetRoleAuthReq, proto.GetRoleAuthResp](
			httpClient,
			baseURL+MainServiceGetRoleAuthProcedure,
			connect.WithSchema(mainServiceGetRoleAuthMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		updateRole: connect.NewClient[proto.UpdateRoleReq, proto.Empty](
			httpClient,
			baseURL+MainServiceUpdateRoleProcedure,
			connect.WithSchema(mainServiceUpdateRoleMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		deleteRole: connect.NewClient[proto.DeleteRoleReq, proto.Empty](
			httpClient,
			baseURL+MainServiceDeleteRoleProcedure,
			connect.WithSchema(mainServiceDeleteRoleMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		bindRole: connect.NewClient[proto.BindRoleReq, proto.Empty](
			httpClient,
			baseURL+MainServiceBindRoleProcedure,
			connect.WithSchema(mainServiceBindRoleMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		unBindRole: connect.NewClient[proto.UnBindRoleReq, proto.Empty](
			httpClient,
			baseURL+MainServiceUnBindRoleProcedure,
			connect.WithSchema(mainServiceUnBindRoleMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
	}
}

// mainServiceClient implements MainServiceClient.
type mainServiceClient struct {
	rawSql          *connect.Client[proto.RasSqlReq, proto.RasSqlResp]
	login           *connect.Client[proto.LoginReq, proto.LoginResp]
	logout          *connect.Client[proto.LogoutReq, proto.Empty]
	createAccount   *connect.Client[proto.CreateAccountReq, proto.Empty]
	listAccount     *connect.Client[proto.ListAccountReq, proto.ListAccountResp]
	updateAccount   *connect.Client[proto.UpdateAccountReq, proto.Empty]
	deleteAccount   *connect.Client[proto.DeleteAccountReq, proto.Empty]
	deactiveAccount *connect.Client[proto.DeleteAccountReq, proto.Empty]
	activeAccount   *connect.Client[proto.DeleteAccountReq, proto.Empty]
	createRole      *connect.Client[proto.CreateRoleReq, proto.Empty]
	listRole        *connect.Client[proto.ListRoleReq, proto.ListRoleResp]
	getRoleAuth     *connect.Client[proto.GetRoleAuthReq, proto.GetRoleAuthResp]
	updateRole      *connect.Client[proto.UpdateRoleReq, proto.Empty]
	deleteRole      *connect.Client[proto.DeleteRoleReq, proto.Empty]
	bindRole        *connect.Client[proto.BindRoleReq, proto.Empty]
	unBindRole      *connect.Client[proto.UnBindRoleReq, proto.Empty]
}

// RawSql calls proto.MainService.RawSql.
func (c *mainServiceClient) RawSql(ctx context.Context, req *connect.Request[proto.RasSqlReq]) (*connect.Response[proto.RasSqlResp], error) {
	return c.rawSql.CallUnary(ctx, req)
}

// Login calls proto.MainService.Login.
func (c *mainServiceClient) Login(ctx context.Context, req *connect.Request[proto.LoginReq]) (*connect.Response[proto.LoginResp], error) {
	return c.login.CallUnary(ctx, req)
}

// Logout calls proto.MainService.Logout.
func (c *mainServiceClient) Logout(ctx context.Context, req *connect.Request[proto.LogoutReq]) (*connect.Response[proto.Empty], error) {
	return c.logout.CallUnary(ctx, req)
}

// CreateAccount calls proto.MainService.CreateAccount.
func (c *mainServiceClient) CreateAccount(ctx context.Context, req *connect.Request[proto.CreateAccountReq]) (*connect.Response[proto.Empty], error) {
	return c.createAccount.CallUnary(ctx, req)
}

// ListAccount calls proto.MainService.ListAccount.
func (c *mainServiceClient) ListAccount(ctx context.Context, req *connect.Request[proto.ListAccountReq]) (*connect.Response[proto.ListAccountResp], error) {
	return c.listAccount.CallUnary(ctx, req)
}

// UpdateAccount calls proto.MainService.UpdateAccount.
func (c *mainServiceClient) UpdateAccount(ctx context.Context, req *connect.Request[proto.UpdateAccountReq]) (*connect.Response[proto.Empty], error) {
	return c.updateAccount.CallUnary(ctx, req)
}

// DeleteAccount calls proto.MainService.DeleteAccount.
func (c *mainServiceClient) DeleteAccount(ctx context.Context, req *connect.Request[proto.DeleteAccountReq]) (*connect.Response[proto.Empty], error) {
	return c.deleteAccount.CallUnary(ctx, req)
}

// DeactiveAccount calls proto.MainService.DeactiveAccount.
func (c *mainServiceClient) DeactiveAccount(ctx context.Context, req *connect.Request[proto.DeleteAccountReq]) (*connect.Response[proto.Empty], error) {
	return c.deactiveAccount.CallUnary(ctx, req)
}

// ActiveAccount calls proto.MainService.ActiveAccount.
func (c *mainServiceClient) ActiveAccount(ctx context.Context, req *connect.Request[proto.DeleteAccountReq]) (*connect.Response[proto.Empty], error) {
	return c.activeAccount.CallUnary(ctx, req)
}

// CreateRole calls proto.MainService.CreateRole.
func (c *mainServiceClient) CreateRole(ctx context.Context, req *connect.Request[proto.CreateRoleReq]) (*connect.Response[proto.Empty], error) {
	return c.createRole.CallUnary(ctx, req)
}

// ListRole calls proto.MainService.ListRole.
func (c *mainServiceClient) ListRole(ctx context.Context, req *connect.Request[proto.ListRoleReq]) (*connect.Response[proto.ListRoleResp], error) {
	return c.listRole.CallUnary(ctx, req)
}

// GetRoleAuth calls proto.MainService.GetRoleAuth.
func (c *mainServiceClient) GetRoleAuth(ctx context.Context, req *connect.Request[proto.GetRoleAuthReq]) (*connect.Response[proto.GetRoleAuthResp], error) {
	return c.getRoleAuth.CallUnary(ctx, req)
}

// UpdateRole calls proto.MainService.UpdateRole.
func (c *mainServiceClient) UpdateRole(ctx context.Context, req *connect.Request[proto.UpdateRoleReq]) (*connect.Response[proto.Empty], error) {
	return c.updateRole.CallUnary(ctx, req)
}

// DeleteRole calls proto.MainService.DeleteRole.
func (c *mainServiceClient) DeleteRole(ctx context.Context, req *connect.Request[proto.DeleteRoleReq]) (*connect.Response[proto.Empty], error) {
	return c.deleteRole.CallUnary(ctx, req)
}

// BindRole calls proto.MainService.BindRole.
func (c *mainServiceClient) BindRole(ctx context.Context, req *connect.Request[proto.BindRoleReq]) (*connect.Response[proto.Empty], error) {
	return c.bindRole.CallUnary(ctx, req)
}

// UnBindRole calls proto.MainService.UnBindRole.
func (c *mainServiceClient) UnBindRole(ctx context.Context, req *connect.Request[proto.UnBindRoleReq]) (*connect.Response[proto.Empty], error) {
	return c.unBindRole.CallUnary(ctx, req)
}

// MainServiceHandler is an implementation of the proto.MainService service.
type MainServiceHandler interface {
	RawSql(context.Context, *connect.Request[proto.RasSqlReq]) (*connect.Response[proto.RasSqlResp], error)
	Login(context.Context, *connect.Request[proto.LoginReq]) (*connect.Response[proto.LoginResp], error)
	Logout(context.Context, *connect.Request[proto.LogoutReq]) (*connect.Response[proto.Empty], error)
	CreateAccount(context.Context, *connect.Request[proto.CreateAccountReq]) (*connect.Response[proto.Empty], error)
	ListAccount(context.Context, *connect.Request[proto.ListAccountReq]) (*connect.Response[proto.ListAccountResp], error)
	UpdateAccount(context.Context, *connect.Request[proto.UpdateAccountReq]) (*connect.Response[proto.Empty], error)
	DeleteAccount(context.Context, *connect.Request[proto.DeleteAccountReq]) (*connect.Response[proto.Empty], error)
	DeactiveAccount(context.Context, *connect.Request[proto.DeleteAccountReq]) (*connect.Response[proto.Empty], error)
	ActiveAccount(context.Context, *connect.Request[proto.DeleteAccountReq]) (*connect.Response[proto.Empty], error)
	CreateRole(context.Context, *connect.Request[proto.CreateRoleReq]) (*connect.Response[proto.Empty], error)
	ListRole(context.Context, *connect.Request[proto.ListRoleReq]) (*connect.Response[proto.ListRoleResp], error)
	GetRoleAuth(context.Context, *connect.Request[proto.GetRoleAuthReq]) (*connect.Response[proto.GetRoleAuthResp], error)
	UpdateRole(context.Context, *connect.Request[proto.UpdateRoleReq]) (*connect.Response[proto.Empty], error)
	DeleteRole(context.Context, *connect.Request[proto.DeleteRoleReq]) (*connect.Response[proto.Empty], error)
	BindRole(context.Context, *connect.Request[proto.BindRoleReq]) (*connect.Response[proto.Empty], error)
	UnBindRole(context.Context, *connect.Request[proto.UnBindRoleReq]) (*connect.Response[proto.Empty], error)
}

// NewMainServiceHandler builds an HTTP handler from the service implementation. It returns the path
// on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewMainServiceHandler(svc MainServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	mainServiceRawSqlHandler := connect.NewUnaryHandler(
		MainServiceRawSqlProcedure,
		svc.RawSql,
		connect.WithSchema(mainServiceRawSqlMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	mainServiceLoginHandler := connect.NewUnaryHandler(
		MainServiceLoginProcedure,
		svc.Login,
		connect.WithSchema(mainServiceLoginMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	mainServiceLogoutHandler := connect.NewUnaryHandler(
		MainServiceLogoutProcedure,
		svc.Logout,
		connect.WithSchema(mainServiceLogoutMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	mainServiceCreateAccountHandler := connect.NewUnaryHandler(
		MainServiceCreateAccountProcedure,
		svc.CreateAccount,
		connect.WithSchema(mainServiceCreateAccountMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	mainServiceListAccountHandler := connect.NewUnaryHandler(
		MainServiceListAccountProcedure,
		svc.ListAccount,
		connect.WithSchema(mainServiceListAccountMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	mainServiceUpdateAccountHandler := connect.NewUnaryHandler(
		MainServiceUpdateAccountProcedure,
		svc.UpdateAccount,
		connect.WithSchema(mainServiceUpdateAccountMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	mainServiceDeleteAccountHandler := connect.NewUnaryHandler(
		MainServiceDeleteAccountProcedure,
		svc.DeleteAccount,
		connect.WithSchema(mainServiceDeleteAccountMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	mainServiceDeactiveAccountHandler := connect.NewUnaryHandler(
		MainServiceDeactiveAccountProcedure,
		svc.DeactiveAccount,
		connect.WithSchema(mainServiceDeactiveAccountMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	mainServiceActiveAccountHandler := connect.NewUnaryHandler(
		MainServiceActiveAccountProcedure,
		svc.ActiveAccount,
		connect.WithSchema(mainServiceActiveAccountMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	mainServiceCreateRoleHandler := connect.NewUnaryHandler(
		MainServiceCreateRoleProcedure,
		svc.CreateRole,
		connect.WithSchema(mainServiceCreateRoleMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	mainServiceListRoleHandler := connect.NewUnaryHandler(
		MainServiceListRoleProcedure,
		svc.ListRole,
		connect.WithSchema(mainServiceListRoleMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	mainServiceGetRoleAuthHandler := connect.NewUnaryHandler(
		MainServiceGetRoleAuthProcedure,
		svc.GetRoleAuth,
		connect.WithSchema(mainServiceGetRoleAuthMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	mainServiceUpdateRoleHandler := connect.NewUnaryHandler(
		MainServiceUpdateRoleProcedure,
		svc.UpdateRole,
		connect.WithSchema(mainServiceUpdateRoleMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	mainServiceDeleteRoleHandler := connect.NewUnaryHandler(
		MainServiceDeleteRoleProcedure,
		svc.DeleteRole,
		connect.WithSchema(mainServiceDeleteRoleMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	mainServiceBindRoleHandler := connect.NewUnaryHandler(
		MainServiceBindRoleProcedure,
		svc.BindRole,
		connect.WithSchema(mainServiceBindRoleMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	mainServiceUnBindRoleHandler := connect.NewUnaryHandler(
		MainServiceUnBindRoleProcedure,
		svc.UnBindRole,
		connect.WithSchema(mainServiceUnBindRoleMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	return "/proto.MainService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case MainServiceRawSqlProcedure:
			mainServiceRawSqlHandler.ServeHTTP(w, r)
		case MainServiceLoginProcedure:
			mainServiceLoginHandler.ServeHTTP(w, r)
		case MainServiceLogoutProcedure:
			mainServiceLogoutHandler.ServeHTTP(w, r)
		case MainServiceCreateAccountProcedure:
			mainServiceCreateAccountHandler.ServeHTTP(w, r)
		case MainServiceListAccountProcedure:
			mainServiceListAccountHandler.ServeHTTP(w, r)
		case MainServiceUpdateAccountProcedure:
			mainServiceUpdateAccountHandler.ServeHTTP(w, r)
		case MainServiceDeleteAccountProcedure:
			mainServiceDeleteAccountHandler.ServeHTTP(w, r)
		case MainServiceDeactiveAccountProcedure:
			mainServiceDeactiveAccountHandler.ServeHTTP(w, r)
		case MainServiceActiveAccountProcedure:
			mainServiceActiveAccountHandler.ServeHTTP(w, r)
		case MainServiceCreateRoleProcedure:
			mainServiceCreateRoleHandler.ServeHTTP(w, r)
		case MainServiceListRoleProcedure:
			mainServiceListRoleHandler.ServeHTTP(w, r)
		case MainServiceGetRoleAuthProcedure:
			mainServiceGetRoleAuthHandler.ServeHTTP(w, r)
		case MainServiceUpdateRoleProcedure:
			mainServiceUpdateRoleHandler.ServeHTTP(w, r)
		case MainServiceDeleteRoleProcedure:
			mainServiceDeleteRoleHandler.ServeHTTP(w, r)
		case MainServiceBindRoleProcedure:
			mainServiceBindRoleHandler.ServeHTTP(w, r)
		case MainServiceUnBindRoleProcedure:
			mainServiceUnBindRoleHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedMainServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedMainServiceHandler struct{}

func (UnimplementedMainServiceHandler) RawSql(context.Context, *connect.Request[proto.RasSqlReq]) (*connect.Response[proto.RasSqlResp], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("proto.MainService.RawSql is not implemented"))
}

func (UnimplementedMainServiceHandler) Login(context.Context, *connect.Request[proto.LoginReq]) (*connect.Response[proto.LoginResp], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("proto.MainService.Login is not implemented"))
}

func (UnimplementedMainServiceHandler) Logout(context.Context, *connect.Request[proto.LogoutReq]) (*connect.Response[proto.Empty], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("proto.MainService.Logout is not implemented"))
}

func (UnimplementedMainServiceHandler) CreateAccount(context.Context, *connect.Request[proto.CreateAccountReq]) (*connect.Response[proto.Empty], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("proto.MainService.CreateAccount is not implemented"))
}

func (UnimplementedMainServiceHandler) ListAccount(context.Context, *connect.Request[proto.ListAccountReq]) (*connect.Response[proto.ListAccountResp], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("proto.MainService.ListAccount is not implemented"))
}

func (UnimplementedMainServiceHandler) UpdateAccount(context.Context, *connect.Request[proto.UpdateAccountReq]) (*connect.Response[proto.Empty], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("proto.MainService.UpdateAccount is not implemented"))
}

func (UnimplementedMainServiceHandler) DeleteAccount(context.Context, *connect.Request[proto.DeleteAccountReq]) (*connect.Response[proto.Empty], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("proto.MainService.DeleteAccount is not implemented"))
}

func (UnimplementedMainServiceHandler) DeactiveAccount(context.Context, *connect.Request[proto.DeleteAccountReq]) (*connect.Response[proto.Empty], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("proto.MainService.DeactiveAccount is not implemented"))
}

func (UnimplementedMainServiceHandler) ActiveAccount(context.Context, *connect.Request[proto.DeleteAccountReq]) (*connect.Response[proto.Empty], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("proto.MainService.ActiveAccount is not implemented"))
}

func (UnimplementedMainServiceHandler) CreateRole(context.Context, *connect.Request[proto.CreateRoleReq]) (*connect.Response[proto.Empty], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("proto.MainService.CreateRole is not implemented"))
}

func (UnimplementedMainServiceHandler) ListRole(context.Context, *connect.Request[proto.ListRoleReq]) (*connect.Response[proto.ListRoleResp], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("proto.MainService.ListRole is not implemented"))
}

func (UnimplementedMainServiceHandler) GetRoleAuth(context.Context, *connect.Request[proto.GetRoleAuthReq]) (*connect.Response[proto.GetRoleAuthResp], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("proto.MainService.GetRoleAuth is not implemented"))
}

func (UnimplementedMainServiceHandler) UpdateRole(context.Context, *connect.Request[proto.UpdateRoleReq]) (*connect.Response[proto.Empty], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("proto.MainService.UpdateRole is not implemented"))
}

func (UnimplementedMainServiceHandler) DeleteRole(context.Context, *connect.Request[proto.DeleteRoleReq]) (*connect.Response[proto.Empty], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("proto.MainService.DeleteRole is not implemented"))
}

func (UnimplementedMainServiceHandler) BindRole(context.Context, *connect.Request[proto.BindRoleReq]) (*connect.Response[proto.Empty], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("proto.MainService.BindRole is not implemented"))
}

func (UnimplementedMainServiceHandler) UnBindRole(context.Context, *connect.Request[proto.UnBindRoleReq]) (*connect.Response[proto.Empty], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("proto.MainService.UnBindRole is not implemented"))
}
