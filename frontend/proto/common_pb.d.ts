// @generated by protoc-gen-es v1.10.0
// @generated from file common.proto (package proto, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";

/**
 * @generated from message proto.Empty
 */
export declare class Empty extends Message<Empty> {
  constructor(data?: PartialMessage<Empty>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "proto.Empty";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Empty;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Empty;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Empty;

  static equals(a: Empty | PlainMessage<Empty> | undefined, b: Empty | PlainMessage<Empty> | undefined): boolean;
}

/**
 * @generated from message proto.ListOption
 */
export declare class ListOption extends Message<ListOption> {
  /**
   * @generated from field: optional proto.Pager Pager = 1;
   */
  Pager?: Pager;

  /**
   * @generated from field: optional proto.Sorter Sorter = 2;
   */
  Sorter?: Sorter;

  /**
   * @generated from field: repeated proto.Query Query = 3;
   */
  Query: Query[];

  constructor(data?: PartialMessage<ListOption>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "proto.ListOption";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListOption;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListOption;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListOption;

  static equals(a: ListOption | PlainMessage<ListOption> | undefined, b: ListOption | PlainMessage<ListOption> | undefined): boolean;
}

/**
 * @generated from message proto.Pager
 */
export declare class Pager extends Message<Pager> {
  /**
   * @generated from field: int32 Number = 1;
   */
  Number: number;

  /**
   * @generated from field: int32 Size = 2;
   */
  Size: number;

  constructor(data?: PartialMessage<Pager>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "proto.Pager";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Pager;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Pager;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Pager;

  static equals(a: Pager | PlainMessage<Pager> | undefined, b: Pager | PlainMessage<Pager> | undefined): boolean;
}

/**
 * @generated from message proto.Sorter
 */
export declare class Sorter extends Message<Sorter> {
  /**
   * @generated from field: bool Asc = 1;
   */
  Asc: boolean;

  /**
   * @generated from field: string Field = 2;
   */
  Field: string;

  constructor(data?: PartialMessage<Sorter>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "proto.Sorter";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Sorter;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Sorter;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Sorter;

  static equals(a: Sorter | PlainMessage<Sorter> | undefined, b: Sorter | PlainMessage<Sorter> | undefined): boolean;
}

/**
 * @generated from message proto.Query
 */
export declare class Query extends Message<Query> {
  /**
   * @generated from field: bool Fuzzy = 1;
   */
  Fuzzy: boolean;

  /**
   * @generated from field: repeated string Fields = 2;
   */
  Fields: string[];

  /**
   * @generated from field: string Value = 3;
   */
  Value: string;

  constructor(data?: PartialMessage<Query>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "proto.Query";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Query;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Query;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Query;

  static equals(a: Query | PlainMessage<Query> | undefined, b: Query | PlainMessage<Query> | undefined): boolean;
}

