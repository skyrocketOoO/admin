// @generated by protoc-gen-es v1.10.0
// @generated from file common.proto (package proto, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import { proto3 } from "@bufbuild/protobuf";

/**
 * @generated from enum proto.Concator
 */
export const Concator = /*@__PURE__*/ proto3.makeEnum(
  "proto.Concator",
  [
    {no: 0, name: "AND"},
    {no: 1, name: "OR"},
  ],
);

/**
 * @generated from message proto.Empty
 */
export const Empty = /*@__PURE__*/ proto3.makeMessageType(
  "proto.Empty",
  [],
);

/**
 * @generated from message proto.ListOption
 */
export const ListOption = /*@__PURE__*/ proto3.makeMessageType(
  "proto.ListOption",
  () => [
    { no: 1, name: "pager", kind: "message", T: Pager, opt: true },
    { no: 2, name: "sorters", kind: "message", T: Sorter, repeated: true },
    { no: 3, name: "conditionGroup", kind: "message", T: ConditionGroup, opt: true },
  ],
);

/**
 * @generated from message proto.Pager
 */
export const Pager = /*@__PURE__*/ proto3.makeMessageType(
  "proto.Pager",
  () => [
    { no: 1, name: "number", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 2, name: "size", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
  ],
);

/**
 * @generated from message proto.Sorter
 */
export const Sorter = /*@__PURE__*/ proto3.makeMessageType(
  "proto.Sorter",
  () => [
    { no: 1, name: "ascending", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 2, name: "field", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ],
);

/**
 * NOT SUPPORTED: "BETWEEN" operator.
 *
 * @generated from message proto.Condition
 */
export const Condition = /*@__PURE__*/ proto3.makeMessageType(
  "proto.Condition",
  () => [
    { no: 1, name: "field", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "operator", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "value", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ],
);

/**
 * Group of filters with a logical operator.
 *
 * @generated from message proto.ConditionGroup
 */
export const ConditionGroup = /*@__PURE__*/ proto3.makeMessageType(
  "proto.ConditionGroup",
  () => [
    { no: 1, name: "concator", kind: "enum", T: proto3.getEnumType(Concator) },
    { no: 2, name: "conditions", kind: "message", T: Condition, repeated: true },
    { no: 3, name: "conditionGroups", kind: "message", T: ConditionGroup, repeated: true },
  ],
);

