// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v1.178.0
//   protoc               unknown
// source: account.proto

/* eslint-disable */
import {
  type CallOptions,
  ChannelCredentials,
  Client,
  type ClientOptions,
  type ClientUnaryCall,
  type handleUnaryCall,
  makeGenericClientConstructor,
  Metadata,
  type ServiceError,
  type UntypedServiceImplementation,
} from "@grpc/grpc-js";
import * as _m0 from "protobufjs/minimal";
import { Empty, ListOption } from "./common";
import Long = require("long");

export const protobufPackage = "proto";

export interface CreateAccountRequest {
  UserName: string;
  Password: string;
  DisplayName: string;
}

export interface ListAccountRequest {
  Option: ListOption | undefined;
}

export interface ListAccountResponse {
  List: AccountData[];
  Total: number;
}

export interface AccountData {
  UserName: string;
  DisplayName: string;
  Email: string;
  State: number;
}

export interface UpdateAccountRequest {
  ID: string;
  DisplayName: string;
  /** 0: no change, 1: active, 2: inactive */
  State: number;
}

export interface DeleteAccountRequest {
  ID: string;
}

function createBaseCreateAccountRequest(): CreateAccountRequest {
  return { UserName: "", Password: "", DisplayName: "" };
}

export const CreateAccountRequest = {
  encode(message: CreateAccountRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.UserName !== "") {
      writer.uint32(10).string(message.UserName);
    }
    if (message.Password !== "") {
      writer.uint32(18).string(message.Password);
    }
    if (message.DisplayName !== "") {
      writer.uint32(26).string(message.DisplayName);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): CreateAccountRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCreateAccountRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.UserName = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.Password = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.DisplayName = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CreateAccountRequest {
    return {
      UserName: isSet(object.UserName) ? globalThis.String(object.UserName) : "",
      Password: isSet(object.Password) ? globalThis.String(object.Password) : "",
      DisplayName: isSet(object.DisplayName) ? globalThis.String(object.DisplayName) : "",
    };
  },

  toJSON(message: CreateAccountRequest): unknown {
    const obj: any = {};
    if (message.UserName !== "") {
      obj.UserName = message.UserName;
    }
    if (message.Password !== "") {
      obj.Password = message.Password;
    }
    if (message.DisplayName !== "") {
      obj.DisplayName = message.DisplayName;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<CreateAccountRequest>, I>>(base?: I): CreateAccountRequest {
    return CreateAccountRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<CreateAccountRequest>, I>>(object: I): CreateAccountRequest {
    const message = createBaseCreateAccountRequest();
    message.UserName = object.UserName ?? "";
    message.Password = object.Password ?? "";
    message.DisplayName = object.DisplayName ?? "";
    return message;
  },
};

function createBaseListAccountRequest(): ListAccountRequest {
  return { Option: undefined };
}

export const ListAccountRequest = {
  encode(message: ListAccountRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.Option !== undefined) {
      ListOption.encode(message.Option, writer.uint32(10).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): ListAccountRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListAccountRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.Option = ListOption.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListAccountRequest {
    return { Option: isSet(object.Option) ? ListOption.fromJSON(object.Option) : undefined };
  },

  toJSON(message: ListAccountRequest): unknown {
    const obj: any = {};
    if (message.Option !== undefined) {
      obj.Option = ListOption.toJSON(message.Option);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ListAccountRequest>, I>>(base?: I): ListAccountRequest {
    return ListAccountRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ListAccountRequest>, I>>(object: I): ListAccountRequest {
    const message = createBaseListAccountRequest();
    message.Option = (object.Option !== undefined && object.Option !== null)
      ? ListOption.fromPartial(object.Option)
      : undefined;
    return message;
  },
};

function createBaseListAccountResponse(): ListAccountResponse {
  return { List: [], Total: 0 };
}

export const ListAccountResponse = {
  encode(message: ListAccountResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    for (const v of message.List) {
      AccountData.encode(v!, writer.uint32(10).fork()).ldelim();
    }
    if (message.Total !== 0) {
      writer.uint32(16).int64(message.Total);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): ListAccountResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListAccountResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.List.push(AccountData.decode(reader, reader.uint32()));
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.Total = longToNumber(reader.int64() as Long);
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListAccountResponse {
    return {
      List: globalThis.Array.isArray(object?.List) ? object.List.map((e: any) => AccountData.fromJSON(e)) : [],
      Total: isSet(object.Total) ? globalThis.Number(object.Total) : 0,
    };
  },

  toJSON(message: ListAccountResponse): unknown {
    const obj: any = {};
    if (message.List?.length) {
      obj.List = message.List.map((e) => AccountData.toJSON(e));
    }
    if (message.Total !== 0) {
      obj.Total = Math.round(message.Total);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ListAccountResponse>, I>>(base?: I): ListAccountResponse {
    return ListAccountResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ListAccountResponse>, I>>(object: I): ListAccountResponse {
    const message = createBaseListAccountResponse();
    message.List = object.List?.map((e) => AccountData.fromPartial(e)) || [];
    message.Total = object.Total ?? 0;
    return message;
  },
};

function createBaseAccountData(): AccountData {
  return { UserName: "", DisplayName: "", Email: "", State: 0 };
}

export const AccountData = {
  encode(message: AccountData, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.UserName !== "") {
      writer.uint32(10).string(message.UserName);
    }
    if (message.DisplayName !== "") {
      writer.uint32(18).string(message.DisplayName);
    }
    if (message.Email !== "") {
      writer.uint32(26).string(message.Email);
    }
    if (message.State !== 0) {
      writer.uint32(32).int32(message.State);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): AccountData {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseAccountData();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.UserName = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.DisplayName = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.Email = reader.string();
          continue;
        case 4:
          if (tag !== 32) {
            break;
          }

          message.State = reader.int32();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): AccountData {
    return {
      UserName: isSet(object.UserName) ? globalThis.String(object.UserName) : "",
      DisplayName: isSet(object.DisplayName) ? globalThis.String(object.DisplayName) : "",
      Email: isSet(object.Email) ? globalThis.String(object.Email) : "",
      State: isSet(object.State) ? globalThis.Number(object.State) : 0,
    };
  },

  toJSON(message: AccountData): unknown {
    const obj: any = {};
    if (message.UserName !== "") {
      obj.UserName = message.UserName;
    }
    if (message.DisplayName !== "") {
      obj.DisplayName = message.DisplayName;
    }
    if (message.Email !== "") {
      obj.Email = message.Email;
    }
    if (message.State !== 0) {
      obj.State = Math.round(message.State);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<AccountData>, I>>(base?: I): AccountData {
    return AccountData.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<AccountData>, I>>(object: I): AccountData {
    const message = createBaseAccountData();
    message.UserName = object.UserName ?? "";
    message.DisplayName = object.DisplayName ?? "";
    message.Email = object.Email ?? "";
    message.State = object.State ?? 0;
    return message;
  },
};

function createBaseUpdateAccountRequest(): UpdateAccountRequest {
  return { ID: "", DisplayName: "", State: 0 };
}

export const UpdateAccountRequest = {
  encode(message: UpdateAccountRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.ID !== "") {
      writer.uint32(10).string(message.ID);
    }
    if (message.DisplayName !== "") {
      writer.uint32(18).string(message.DisplayName);
    }
    if (message.State !== 0) {
      writer.uint32(24).int32(message.State);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): UpdateAccountRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUpdateAccountRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.ID = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.DisplayName = reader.string();
          continue;
        case 3:
          if (tag !== 24) {
            break;
          }

          message.State = reader.int32();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UpdateAccountRequest {
    return {
      ID: isSet(object.ID) ? globalThis.String(object.ID) : "",
      DisplayName: isSet(object.DisplayName) ? globalThis.String(object.DisplayName) : "",
      State: isSet(object.State) ? globalThis.Number(object.State) : 0,
    };
  },

  toJSON(message: UpdateAccountRequest): unknown {
    const obj: any = {};
    if (message.ID !== "") {
      obj.ID = message.ID;
    }
    if (message.DisplayName !== "") {
      obj.DisplayName = message.DisplayName;
    }
    if (message.State !== 0) {
      obj.State = Math.round(message.State);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<UpdateAccountRequest>, I>>(base?: I): UpdateAccountRequest {
    return UpdateAccountRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<UpdateAccountRequest>, I>>(object: I): UpdateAccountRequest {
    const message = createBaseUpdateAccountRequest();
    message.ID = object.ID ?? "";
    message.DisplayName = object.DisplayName ?? "";
    message.State = object.State ?? 0;
    return message;
  },
};

function createBaseDeleteAccountRequest(): DeleteAccountRequest {
  return { ID: "" };
}

export const DeleteAccountRequest = {
  encode(message: DeleteAccountRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.ID !== "") {
      writer.uint32(10).string(message.ID);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): DeleteAccountRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDeleteAccountRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.ID = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): DeleteAccountRequest {
    return { ID: isSet(object.ID) ? globalThis.String(object.ID) : "" };
  },

  toJSON(message: DeleteAccountRequest): unknown {
    const obj: any = {};
    if (message.ID !== "") {
      obj.ID = message.ID;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<DeleteAccountRequest>, I>>(base?: I): DeleteAccountRequest {
    return DeleteAccountRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<DeleteAccountRequest>, I>>(object: I): DeleteAccountRequest {
    const message = createBaseDeleteAccountRequest();
    message.ID = object.ID ?? "";
    return message;
  },
};

export type AdminService = typeof AdminService;
export const AdminService = {
  createAccount: {
    path: "/proto.Admin/CreateAccount",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: CreateAccountRequest) => Buffer.from(CreateAccountRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer) => CreateAccountRequest.decode(value),
    responseSerialize: (value: Empty) => Buffer.from(Empty.encode(value).finish()),
    responseDeserialize: (value: Buffer) => Empty.decode(value),
  },
  listAccount: {
    path: "/proto.Admin/ListAccount",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: ListAccountRequest) => Buffer.from(ListAccountRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer) => ListAccountRequest.decode(value),
    responseSerialize: (value: ListAccountResponse) => Buffer.from(ListAccountResponse.encode(value).finish()),
    responseDeserialize: (value: Buffer) => ListAccountResponse.decode(value),
  },
  updateAccount: {
    path: "/proto.Admin/UpdateAccount",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: UpdateAccountRequest) => Buffer.from(UpdateAccountRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer) => UpdateAccountRequest.decode(value),
    responseSerialize: (value: Empty) => Buffer.from(Empty.encode(value).finish()),
    responseDeserialize: (value: Buffer) => Empty.decode(value),
  },
  deleteAccount: {
    path: "/proto.Admin/DeleteAccount",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: DeleteAccountRequest) => Buffer.from(DeleteAccountRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer) => DeleteAccountRequest.decode(value),
    responseSerialize: (value: Empty) => Buffer.from(Empty.encode(value).finish()),
    responseDeserialize: (value: Buffer) => Empty.decode(value),
  },
} as const;

export interface AdminServer extends UntypedServiceImplementation {
  createAccount: handleUnaryCall<CreateAccountRequest, Empty>;
  listAccount: handleUnaryCall<ListAccountRequest, ListAccountResponse>;
  updateAccount: handleUnaryCall<UpdateAccountRequest, Empty>;
  deleteAccount: handleUnaryCall<DeleteAccountRequest, Empty>;
}

export interface AdminClient extends Client {
  createAccount(
    request: CreateAccountRequest,
    callback: (error: ServiceError | null, response: Empty) => void,
  ): ClientUnaryCall;
  createAccount(
    request: CreateAccountRequest,
    metadata: Metadata,
    callback: (error: ServiceError | null, response: Empty) => void,
  ): ClientUnaryCall;
  createAccount(
    request: CreateAccountRequest,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (error: ServiceError | null, response: Empty) => void,
  ): ClientUnaryCall;
  listAccount(
    request: ListAccountRequest,
    callback: (error: ServiceError | null, response: ListAccountResponse) => void,
  ): ClientUnaryCall;
  listAccount(
    request: ListAccountRequest,
    metadata: Metadata,
    callback: (error: ServiceError | null, response: ListAccountResponse) => void,
  ): ClientUnaryCall;
  listAccount(
    request: ListAccountRequest,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (error: ServiceError | null, response: ListAccountResponse) => void,
  ): ClientUnaryCall;
  updateAccount(
    request: UpdateAccountRequest,
    callback: (error: ServiceError | null, response: Empty) => void,
  ): ClientUnaryCall;
  updateAccount(
    request: UpdateAccountRequest,
    metadata: Metadata,
    callback: (error: ServiceError | null, response: Empty) => void,
  ): ClientUnaryCall;
  updateAccount(
    request: UpdateAccountRequest,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (error: ServiceError | null, response: Empty) => void,
  ): ClientUnaryCall;
  deleteAccount(
    request: DeleteAccountRequest,
    callback: (error: ServiceError | null, response: Empty) => void,
  ): ClientUnaryCall;
  deleteAccount(
    request: DeleteAccountRequest,
    metadata: Metadata,
    callback: (error: ServiceError | null, response: Empty) => void,
  ): ClientUnaryCall;
  deleteAccount(
    request: DeleteAccountRequest,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (error: ServiceError | null, response: Empty) => void,
  ): ClientUnaryCall;
}

export const AdminClient = makeGenericClientConstructor(AdminService, "proto.Admin") as unknown as {
  new (address: string, credentials: ChannelCredentials, options?: Partial<ClientOptions>): AdminClient;
  service: typeof AdminService;
  serviceName: string;
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function longToNumber(long: Long): number {
  if (long.gt(globalThis.Number.MAX_SAFE_INTEGER)) {
    throw new globalThis.Error("Value is larger than Number.MAX_SAFE_INTEGER");
  }
  if (long.lt(globalThis.Number.MIN_SAFE_INTEGER)) {
    throw new globalThis.Error("Value is smaller than Number.MIN_SAFE_INTEGER");
  }
  return long.toNumber();
}

if (_m0.util.Long !== Long) {
  _m0.util.Long = Long as any;
  _m0.configure();
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}
